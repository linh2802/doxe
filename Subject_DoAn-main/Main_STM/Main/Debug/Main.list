
Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d5c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa4  08005fa4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000001c  08005fc8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08005fc8  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001847d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f2  00000000  00000000  000384c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193f6  00000000  00000000  0003dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e76  00000000  00000000  00057036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099503  00000000  00000000  0006feac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001093af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000534c  00000000  00000000  00109404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005edc 	.word	0x08005edc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08005edc 	.word	0x08005edc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	4b72      	ldr	r3, [pc, #456]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a71      	ldr	r2, [pc, #452]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b6f      	ldr	r3, [pc, #444]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a6a      	ldr	r2, [pc, #424]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b68      	ldr	r3, [pc, #416]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b64      	ldr	r3, [pc, #400]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a63      	ldr	r2, [pc, #396]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b61      	ldr	r3, [pc, #388]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b5d      	ldr	r3, [pc, #372]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a5c      	ldr	r2, [pc, #368]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b5a      	ldr	r3, [pc, #360]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a55      	ldr	r2, [pc, #340]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b53      	ldr	r3, [pc, #332]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b4f      	ldr	r3, [pc, #316]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a4e      	ldr	r2, [pc, #312]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b4c      	ldr	r3, [pc, #304]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI1_SS_1_Pin|SPI1_RST_1_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	210c      	movs	r1, #12
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 8000594:	f002 fc26 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_Pin|SPI1_RST_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	210c      	movs	r1, #12
 800059c:	4847      	ldr	r0, [pc, #284]	; (80006bc <MX_GPIO_Init+0x1ec>)
 800059e:	f002 fc21 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a8:	4845      	ldr	r0, [pc, #276]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 80005aa:	f002 fc1b 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2120      	movs	r1, #32
 80005b2:	4844      	ldr	r0, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x1f4>)
 80005b4:	f002 fc16 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPI1_SS_1_Pin|SPI1_RST_1_Pin;
 80005b8:	230c      	movs	r3, #12
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	483a      	ldr	r0, [pc, #232]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 80005d0:	f002 fa84 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_IN_Pin|BUTTON_OUT_Pin;
 80005d4:	2306      	movs	r3, #6
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <MX_GPIO_Init+0x1f8>)
 80005ea:	f002 fa77 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin|SPI1_RST_Pin;
 80005ee:	230c      	movs	r3, #12
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	482d      	ldr	r0, [pc, #180]	; (80006bc <MX_GPIO_Init+0x1ec>)
 8000606:	f002 fa69 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	4827      	ldr	r0, [pc, #156]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 8000624:	f002 fa5a 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_OUT_Pin;
 8000628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800062e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000634:	2301      	movs	r3, #1
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_OUT_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	481f      	ldr	r0, [pc, #124]	; (80006bc <MX_GPIO_Init+0x1ec>)
 8000640:	f002 fa4c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_IN_Pin;
 8000644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_IN_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <MX_GPIO_Init+0x1ec>)
 800065c:	f002 fa3e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	4813      	ldr	r0, [pc, #76]	; (80006c4 <MX_GPIO_Init+0x1f4>)
 8000678:	f002 fa30 	bl	8002adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	2007      	movs	r0, #7
 8000682:	f002 f9f4 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000686:	2007      	movs	r0, #7
 8000688:	f002 fa0d 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 4, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2104      	movs	r1, #4
 8000690:	2008      	movs	r0, #8
 8000692:	f002 f9ec 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000696:	2008      	movs	r0, #8
 8000698:	f002 fa05 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2104      	movs	r1, #4
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f002 f9e4 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a6:	2028      	movs	r0, #40	; 0x28
 80006a8:	f002 f9fd 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020c00 	.word	0x40020c00
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800

080006cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD  0x4e// change this according to ur setup or 4E or 3F

void lcd_send_cmd (char cmd)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f023 030f 	bic.w	r3, r3, #15
 80006dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f043 030c 	orr.w	r3, r3, #12
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	f043 030c 	orr.w	r3, r3, #12
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b2db      	uxtb	r3, r3
 800070a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800070c:	f107 0208 	add.w	r2, r7, #8
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2304      	movs	r3, #4
 8000716:	214e      	movs	r1, #78	; 0x4e
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <lcd_send_cmd+0x5c>)
 800071a:	f002 fcd9 	bl	80030d0 <HAL_I2C_Master_Transmit>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000003c 	.word	0x2000003c

0800072c <lcd_send_data>:

void lcd_send_data (char data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af02      	add	r7, sp, #8
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f023 030f 	bic.w	r3, r3, #15
 800073c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f043 030d 	orr.w	r3, r3, #13
 800074a:	b2db      	uxtb	r3, r3
 800074c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	f043 0309 	orr.w	r3, r3, #9
 8000754:	b2db      	uxtb	r3, r3
 8000756:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	f043 030d 	orr.w	r3, r3, #13
 800075e:	b2db      	uxtb	r3, r3
 8000760:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	f043 0309 	orr.w	r3, r3, #9
 8000768:	b2db      	uxtb	r3, r3
 800076a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800076c:	f107 0208 	add.w	r2, r7, #8
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2304      	movs	r3, #4
 8000776:	214e      	movs	r1, #78	; 0x4e
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <lcd_send_data+0x5c>)
 800077a:	f002 fca9 	bl	80030d0 <HAL_I2C_Master_Transmit>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000003c 	.word	0x2000003c

0800078c <lcd_clear>:

void lcd_clear (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	f7ff ff9a 	bl	80006cc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	e005      	b.n	80007aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800079e:	2020      	movs	r0, #32
 80007a0:	f7ff ffc4 	bl	800072c <lcd_send_data>
	for (int i=0; i<70; i++)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b45      	cmp	r3, #69	; 0x45
 80007ae:	ddf6      	ble.n	800079e <lcd_clear+0x12>
	}
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <lcd_put_cur+0x18>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d005      	beq.n	80007dc <lcd_put_cur+0x22>
 80007d0:	e009      	b.n	80007e6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	603b      	str	r3, [r7, #0]
            break;
 80007da:	e004      	b.n	80007e6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007e2:	603b      	str	r3, [r7, #0]
            break;
 80007e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff6e 	bl	80006cc <lcd_send_cmd>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <lcd_init>:


void lcd_init (void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007fc:	2032      	movs	r0, #50	; 0x32
 80007fe:	f002 f837 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000802:	2030      	movs	r0, #48	; 0x30
 8000804:	f7ff ff62 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000808:	2005      	movs	r0, #5
 800080a:	f002 f831 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x30);
 800080e:	2030      	movs	r0, #48	; 0x30
 8000810:	f7ff ff5c 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000814:	2001      	movs	r0, #1
 8000816:	f002 f82b 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x30);
 800081a:	2030      	movs	r0, #48	; 0x30
 800081c:	f7ff ff56 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f002 f825 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000826:	2020      	movs	r0, #32
 8000828:	f7ff ff50 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f002 f81f 	bl	8002870 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000832:	2028      	movs	r0, #40	; 0x28
 8000834:	f7ff ff4a 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f002 f819 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800083e:	2008      	movs	r0, #8
 8000840:	f7ff ff44 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f002 f813 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff ff3e 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f002 f80d 	bl	8002870 <HAL_Delay>
	HAL_Delay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f002 f80a 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800085c:	2006      	movs	r0, #6
 800085e:	f7ff ff35 	bl	80006cc <lcd_send_cmd>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f002 f804 	bl	8002870 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000868:	200c      	movs	r0, #12
 800086a:	f7ff ff2f 	bl	80006cc <lcd_send_cmd>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800087a:	e006      	b.n	800088a <lcd_send_string+0x18>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff51 	bl	800072c <lcd_send_data>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f4      	bne.n	800087c <lcd_send_string+0xa>
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <MX_I2C1_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x50>)
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x58>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_I2C1_Init+0x50>)
 80008da:	f002 fab5 	bl	8002e48 <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 fbce 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000003c 	.word	0x2000003c
 80008f0:	40005400 	.word	0x40005400
 80008f4:	000186a0 	.word	0x000186a0

080008f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_I2C_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12b      	bne.n	8000972 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_I2C_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_I2C_MspInit+0x88>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_I2C_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000936:	23c0      	movs	r3, #192	; 0xc0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000946:	2304      	movs	r3, #4
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <HAL_I2C_MspInit+0x8c>)
 8000952:	f002 f8c3 	bl	8002adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_I2C_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_I2C_MspInit+0x88>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_I2C_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40005400 	.word	0x40005400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f001 fefe 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 fa2c 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff fd9c 	bl	80004d0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000998:	f001 fba8 	bl	80020ec <MX_RTC_Init>
  MX_TIM2_Init();
 800099c:	f001 fd40 	bl	8002420 <MX_TIM2_Init>
  MX_TIM11_Init();
 80009a0:	f001 fdc0 	bl	8002524 <MX_TIM11_Init>
  MX_I2C1_Init();
 80009a4:	f7ff ff7a 	bl	800089c <MX_I2C1_Init>
  MX_SPI1_Init();
 80009a8:	f001 fc26 	bl	80021f8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80009ac:	f001 fe52 	bl	8002654 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80009b0:	f7ff ff22 	bl	80007f8 <lcd_init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009b4:	2100      	movs	r1, #0
 80009b6:	48c0      	ldr	r0, [pc, #768]	; (8000cb8 <main+0x330>)
 80009b8:	f003 ffea 	bl	8004990 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009bc:	2104      	movs	r1, #4
 80009be:	48be      	ldr	r0, [pc, #760]	; (8000cb8 <main+0x330>)
 80009c0:	f003 ffe6 	bl	8004990 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim11);
 80009c4:	48bd      	ldr	r0, [pc, #756]	; (8000cbc <main+0x334>)
 80009c6:	f003 ff2f 	bl	8004828 <HAL_TIM_Base_Start>
//	RTC_TimeTypeDef sTime;
//	RTC_DateTypeDef sDate;

	lcd_clear();
 80009ca:	f7ff fedf 	bl	800078c <lcd_clear>
	lcd_put_cur(0,0);
 80009ce:	2100      	movs	r1, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fef2 	bl	80007ba <lcd_put_cur>
	lcd_send_string("RUNNING...");
 80009d6:	48ba      	ldr	r0, [pc, #744]	; (8000cc0 <main+0x338>)
 80009d8:	f7ff ff4b 	bl	8000872 <lcd_send_string>
	htim2.Instance->CCR2 = 30;
 80009dc:	4bb6      	ldr	r3, [pc, #728]	; (8000cb8 <main+0x330>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	221e      	movs	r2, #30
 80009e2:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR1 = 118;
 80009e4:	4bb4      	ldr	r3, [pc, #720]	; (8000cb8 <main+0x330>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2276      	movs	r2, #118	; 0x76
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
	Buzzer_Announ(2000);
 80009ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f0:	f000 fa84 	bl	8000efc <Buzzer_Announ>
	clear_numData();
 80009f4:	f000 fb2c 	bl	8001050 <clear_numData>
	MFRC522_Reset();
 80009f8:	f000 fb72 	bl	80010e0 <MFRC522_Reset>
	MFRC522_AntennaOn();
 80009fc:	f001 fb4c 	bl	8002098 <MFRC522_AntennaOn>
	MFRC522_Out_Reset();
 8000a00:	f000 fbac 	bl	800115c <MFRC522_Out_Reset>
	MFRC522_Out_AntennaOn();
 8000a04:	f001 fb5d 	bl	80020c2 <MFRC522_Out_AntennaOn>
	htim2.Instance->CCR2 = 80;
 8000a08:	4bab      	ldr	r3, [pc, #684]	; (8000cb8 <main+0x330>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2250      	movs	r2, #80	; 0x50
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR1 = 65;
 8000a10:	4ba9      	ldr	r3, [pc, #676]	; (8000cb8 <main+0x330>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2241      	movs	r2, #65	; 0x41
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
	lcd_clear();
 8000a18:	f7ff feb8 	bl	800078c <lcd_clear>
	lcd_put_cur(0,0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fecb 	bl	80007ba <lcd_put_cur>
	lcd_send_string("IN: ");
 8000a24:	48a7      	ldr	r0, [pc, #668]	; (8000cc4 <main+0x33c>)
 8000a26:	f7ff ff24 	bl	8000872 <lcd_send_string>
	lcd_put_cur(1, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fec4 	bl	80007ba <lcd_put_cur>
	lcd_send_string("OUT: ");
 8000a32:	48a5      	ldr	r0, [pc, #660]	; (8000cc8 <main+0x340>)
 8000a34:	f7ff ff1d 	bl	8000872 <lcd_send_string>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//Check UID card
        if (MFRC522_Request(PICC_REQALL, serNum) == MI_OK)
 8000a38:	49a4      	ldr	r1, [pc, #656]	; (8000ccc <main+0x344>)
 8000a3a:	2052      	movs	r0, #82	; 0x52
 8000a3c:	f000 fc80 	bl	8001340 <MFRC522_Request>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f040 808d 	bne.w	8000b62 <main+0x1da>
		{
        	t = 1;
 8000a48:	4ba1      	ldr	r3, [pc, #644]	; (8000cd0 <main+0x348>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
			if (MFRC522_Anticoll(serNum) != MI_OK) 										continue;
 8000a4e:	489f      	ldr	r0, [pc, #636]	; (8000ccc <main+0x344>)
 8000a50:	f000 fce2 	bl	8001418 <MFRC522_Anticoll>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f040 81a8 	bne.w	8000dac <main+0x424>
			if (MFRC522_Select(serNum) != MI_OK)										continue;
 8000a5c:	489b      	ldr	r0, [pc, #620]	; (8000ccc <main+0x344>)
 8000a5e:	f000 fd89 	bl	8001574 <MFRC522_Select>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f040 81a3 	bne.w	8000db0 <main+0x428>
			if (MFRC522_AuthState(PICC_AUTHENT1A, 4, defaultKeyA, serNum) != MI_OK)		continue;
 8000a6a:	4b98      	ldr	r3, [pc, #608]	; (8000ccc <main+0x344>)
 8000a6c:	4a99      	ldr	r2, [pc, #612]	; (8000cd4 <main+0x34c>)
 8000a6e:	2104      	movs	r1, #4
 8000a70:	2060      	movs	r0, #96	; 0x60
 8000a72:	f000 fe21 	bl	80016b8 <MFRC522_AuthState>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f040 819b 	bne.w	8000db4 <main+0x42c>
			if (MFRC522_Read(4, data) != MI_OK)											continue;
 8000a7e:	4996      	ldr	r1, [pc, #600]	; (8000cd8 <main+0x350>)
 8000a80:	2004      	movs	r0, #4
 8000a82:	f000 fee3 	bl	800184c <MFRC522_Read>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f040 8195 	bne.w	8000db8 <main+0x430>
			if(data[0] != 48)
 8000a8e:	4b92      	ldr	r3, [pc, #584]	; (8000cd8 <main+0x350>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b30      	cmp	r3, #48	; 0x30
 8000a94:	d012      	beq.n	8000abc <main+0x134>
			{
				lcd_put_cur(0,4);
 8000a96:	2104      	movs	r1, #4
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe8e 	bl	80007ba <lcd_put_cur>
				lcd_send_string("Error");
 8000a9e:	488f      	ldr	r0, [pc, #572]	; (8000cdc <main+0x354>)
 8000aa0:	f7ff fee7 	bl	8000872 <lcd_send_string>
				Buzzer_Announ(500);
 8000aa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa8:	f000 fa28 	bl	8000efc <Buzzer_Announ>
				lcd_put_cur(0,0);
 8000aac:	2100      	movs	r1, #0
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe83 	bl	80007ba <lcd_put_cur>
				lcd_send_string("IN:                ");
 8000ab4:	488a      	ldr	r0, [pc, #552]	; (8000ce0 <main+0x358>)
 8000ab6:	f7ff fedc 	bl	8000872 <lcd_send_string>
				continue;
 8000aba:	e186      	b.n	8000dca <main+0x442>
			}
			else
			{
				HAL_UART_Transmit(&huart6, (uint8_t*) "I", 1, 300);
 8000abc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4988      	ldr	r1, [pc, #544]	; (8000ce4 <main+0x35c>)
 8000ac4:	4888      	ldr	r0, [pc, #544]	; (8000ce8 <main+0x360>)
 8000ac6:	f004 fe72 	bl	80057ae <HAL_UART_Transmit>
				while(HAL_UART_Receive(&huart6,(uint8_t*)  &c, 1, 300) != HAL_OK)
 8000aca:	e00c      	b.n	8000ae6 <main+0x15e>
				{
					if(c != "D" && c != "E")
 8000acc:	4b87      	ldr	r3, [pc, #540]	; (8000cec <main+0x364>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b87      	ldr	r3, [pc, #540]	; (8000cf0 <main+0x368>)
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d010      	beq.n	8000afa <main+0x172>
 8000ad8:	4b84      	ldr	r3, [pc, #528]	; (8000cec <main+0x364>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b85      	ldr	r3, [pc, #532]	; (8000cf4 <main+0x36c>)
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d00a      	beq.n	8000afa <main+0x172>
					{
						continue;
 8000ae4:	bf00      	nop
				while(HAL_UART_Receive(&huart6,(uint8_t*)  &c, 1, 300) != HAL_OK)
 8000ae6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000aea:	2201      	movs	r2, #1
 8000aec:	497f      	ldr	r1, [pc, #508]	; (8000cec <main+0x364>)
 8000aee:	487e      	ldr	r0, [pc, #504]	; (8000ce8 <main+0x360>)
 8000af0:	f004 feef 	bl	80058d2 <HAL_UART_Receive>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e8      	bne.n	8000acc <main+0x144>
					else
					{
						break;
					}
				}
				switch(c)
 8000afa:	4b7c      	ldr	r3, [pc, #496]	; (8000cec <main+0x364>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b44      	cmp	r3, #68	; 0x44
 8000b00:	d007      	beq.n	8000b12 <main+0x18a>
 8000b02:	2b45      	cmp	r3, #69	; 0x45
 8000b04:	f040 814d 	bne.w	8000da2 <main+0x41a>
				{
					case 'E':
					{
						Buzzer_Announ(500);
 8000b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b0c:	f000 f9f6 	bl	8000efc <Buzzer_Announ>
						continue;
 8000b10:	e15b      	b.n	8000dca <main+0x442>
					}
					case 'D':
					{
						while(HAL_UART_Receive(&huart6, (uint8_t*)&numData, 10, 1000) != HAL_OK);
 8000b12:	bf00      	nop
 8000b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b18:	220a      	movs	r2, #10
 8000b1a:	4977      	ldr	r1, [pc, #476]	; (8000cf8 <main+0x370>)
 8000b1c:	4872      	ldr	r0, [pc, #456]	; (8000ce8 <main+0x360>)
 8000b1e:	f004 fed8 	bl	80058d2 <HAL_UART_Receive>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f5      	bne.n	8000b14 <main+0x18c>
						MFRC522_Write(4, (uint8_t*) &numData);
 8000b28:	4973      	ldr	r1, [pc, #460]	; (8000cf8 <main+0x370>)
 8000b2a:	2004      	movs	r0, #4
 8000b2c:	f000 ff12 	bl	8001954 <MFRC522_Write>
						display(4);
 8000b30:	2004      	movs	r0, #4
 8000b32:	f000 fa31 	bl	8000f98 <display>
						delay_ms(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	f000 f9c1 	bl	8000ec0 <delay_ms>
						lcd_put_cur(0,0);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe3a 	bl	80007ba <lcd_put_cur>
						lcd_send_string("IN:                ");
 8000b46:	4866      	ldr	r0, [pc, #408]	; (8000ce0 <main+0x358>)
 8000b48:	f7ff fe93 	bl	8000872 <lcd_send_string>
						clear_numData();
 8000b4c:	f000 fa80 	bl	8001050 <clear_numData>
						htim2.Instance->CCR2 = 30;
 8000b50:	4b59      	ldr	r3, [pc, #356]	; (8000cb8 <main+0x330>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	221e      	movs	r2, #30
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
						delay_ms(700);
 8000b58:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000b5c:	f000 f9b0 	bl	8000ec0 <delay_ms>
						continue;
 8000b60:	e133      	b.n	8000dca <main+0x442>
					}
				}
			}

		}
		else if (MFRC522_Out_Request(PICC_REQALL, serNum) == MI_OK)
 8000b62:	495a      	ldr	r1, [pc, #360]	; (8000ccc <main+0x344>)
 8000b64:	2052      	movs	r0, #82	; 0x52
 8000b66:	f000 fc21 	bl	80013ac <MFRC522_Out_Request>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f040 8118 	bne.w	8000da2 <main+0x41a>
		{
			if (MFRC522_Out_Anticoll(serNum) != MI_OK) 										continue;
 8000b72:	4856      	ldr	r0, [pc, #344]	; (8000ccc <main+0x344>)
 8000b74:	f000 fca7 	bl	80014c6 <MFRC522_Out_Anticoll>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 811e 	bne.w	8000dbc <main+0x434>
			if (MFRC522_Select_Out(serNum) != MI_OK)										continue;
 8000b80:	4852      	ldr	r0, [pc, #328]	; (8000ccc <main+0x344>)
 8000b82:	f000 fd48 	bl	8001616 <MFRC522_Select_Out>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f040 8119 	bne.w	8000dc0 <main+0x438>
			if (MFRC522_AuthState_Out(PICC_AUTHENT1A, 4, defaultKeyA, serNum) != MI_OK) 	continue;
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <main+0x344>)
 8000b90:	4a50      	ldr	r2, [pc, #320]	; (8000cd4 <main+0x34c>)
 8000b92:	2104      	movs	r1, #4
 8000b94:	2060      	movs	r0, #96	; 0x60
 8000b96:	f000 fdf4 	bl	8001782 <MFRC522_AuthState_Out>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f040 8111 	bne.w	8000dc4 <main+0x43c>
			if (MFRC522_Read_Out(4, data) != MI_OK)											continue;
 8000ba2:	494d      	ldr	r1, [pc, #308]	; (8000cd8 <main+0x350>)
 8000ba4:	2004      	movs	r0, #4
 8000ba6:	f000 fe93 	bl	80018d0 <MFRC522_Read_Out>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f040 810b 	bne.w	8000dc8 <main+0x440>
			if(data[0] == 48)
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <main+0x350>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b30      	cmp	r3, #48	; 0x30
 8000bb8:	d112      	bne.n	8000be0 <main+0x258>
			{
				lcd_put_cur(1,5);
 8000bba:	2105      	movs	r1, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fdfc 	bl	80007ba <lcd_put_cur>
				lcd_send_string("Error");
 8000bc2:	4846      	ldr	r0, [pc, #280]	; (8000cdc <main+0x354>)
 8000bc4:	f7ff fe55 	bl	8000872 <lcd_send_string>
				Buzzer_Announ(500);
 8000bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bcc:	f000 f996 	bl	8000efc <Buzzer_Announ>
				lcd_put_cur(1,0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fdf1 	bl	80007ba <lcd_put_cur>
				lcd_send_string("OUT:                ");
 8000bd8:	4848      	ldr	r0, [pc, #288]	; (8000cfc <main+0x374>)
 8000bda:	f7ff fe4a 	bl	8000872 <lcd_send_string>
				continue;
 8000bde:	e0f4      	b.n	8000dca <main+0x442>
			}
			else
			{
				HAL_UART_Transmit(&huart6, (uint8_t*)"O", 1, 300);
 8000be0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000be4:	2201      	movs	r2, #1
 8000be6:	4946      	ldr	r1, [pc, #280]	; (8000d00 <main+0x378>)
 8000be8:	483f      	ldr	r0, [pc, #252]	; (8000ce8 <main+0x360>)
 8000bea:	f004 fde0 	bl	80057ae <HAL_UART_Transmit>
				while(HAL_UART_Receive(&huart6,(uint8_t*)  &c, 1, 300) != HAL_OK)
 8000bee:	e00c      	b.n	8000c0a <main+0x282>
				{
					if(c != "D" && c != "E")
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <main+0x364>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <main+0x368>)
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d010      	beq.n	8000c1e <main+0x296>
 8000bfc:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <main+0x364>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <main+0x36c>)
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d00a      	beq.n	8000c1e <main+0x296>
					{
						continue;
 8000c08:	bf00      	nop
				while(HAL_UART_Receive(&huart6,(uint8_t*)  &c, 1, 300) != HAL_OK)
 8000c0a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4936      	ldr	r1, [pc, #216]	; (8000cec <main+0x364>)
 8000c12:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <main+0x360>)
 8000c14:	f004 fe5d 	bl	80058d2 <HAL_UART_Receive>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1e8      	bne.n	8000bf0 <main+0x268>
					else
					{
						break;
					}
				}
				switch(c)
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <main+0x364>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b44      	cmp	r3, #68	; 0x44
 8000c24:	d007      	beq.n	8000c36 <main+0x2ae>
 8000c26:	2b45      	cmp	r3, #69	; 0x45
 8000c28:	f040 80bb 	bne.w	8000da2 <main+0x41a>
				{
					case 'E':
					{
						Buzzer_Announ(500);
 8000c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c30:	f000 f964 	bl	8000efc <Buzzer_Announ>
						continue;
 8000c34:	e0c9      	b.n	8000dca <main+0x442>
					}
					case 'D':
					{
						while(HAL_UART_Receive(&huart6, (uint8_t*)&numData, 10, 1000) != HAL_OK);
 8000c36:	bf00      	nop
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	492e      	ldr	r1, [pc, #184]	; (8000cf8 <main+0x370>)
 8000c40:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <main+0x360>)
 8000c42:	f004 fe46 	bl	80058d2 <HAL_UART_Receive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f5      	bne.n	8000c38 <main+0x2b0>
						if(CompareData() == MI_OK)
 8000c4c:	f000 f9d2 	bl	8000ff4 <CompareData>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d11c      	bne.n	8000c90 <main+0x308>
						{
							MFRC522_Write_Out(4, (uint8_t*) "0000000000");
 8000c56:	492b      	ldr	r1, [pc, #172]	; (8000d04 <main+0x37c>)
 8000c58:	2004      	movs	r0, #4
 8000c5a:	f000 fee9 	bl	8001a30 <MFRC522_Write_Out>
							display(5);
 8000c5e:	2005      	movs	r0, #5
 8000c60:	f000 f99a 	bl	8000f98 <display>
							delay_ms(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f000 f92a 	bl	8000ec0 <delay_ms>
							lcd_put_cur(1,0);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fda3 	bl	80007ba <lcd_put_cur>
							lcd_send_string("OUT:              ");
 8000c74:	4824      	ldr	r0, [pc, #144]	; (8000d08 <main+0x380>)
 8000c76:	f7ff fdfc 	bl	8000872 <lcd_send_string>
							clear_numData();
 8000c7a:	f000 f9e9 	bl	8001050 <clear_numData>
							htim2.Instance->CCR1 = 118;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <main+0x330>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2276      	movs	r2, #118	; 0x76
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
							delay_ms(700);
 8000c86:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000c8a:	f000 f919 	bl	8000ec0 <delay_ms>
							lcd_send_string("Error");
							Buzzer_Announ(500);
							lcd_put_cur(1,0);
							lcd_send_string("OUT:                ");
						}
						continue;
 8000c8e:	e09c      	b.n	8000dca <main+0x442>
							lcd_put_cur(1,5);
 8000c90:	2105      	movs	r1, #5
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fd91 	bl	80007ba <lcd_put_cur>
							lcd_send_string("Error");
 8000c98:	4810      	ldr	r0, [pc, #64]	; (8000cdc <main+0x354>)
 8000c9a:	f7ff fdea 	bl	8000872 <lcd_send_string>
							Buzzer_Announ(500);
 8000c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca2:	f000 f92b 	bl	8000efc <Buzzer_Announ>
							lcd_put_cur(1,0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fd86 	bl	80007ba <lcd_put_cur>
							lcd_send_string("OUT:                ");
 8000cae:	4813      	ldr	r0, [pc, #76]	; (8000cfc <main+0x374>)
 8000cb0:	f7ff fddf 	bl	8000872 <lcd_send_string>
						continue;
 8000cb4:	e089      	b.n	8000dca <main+0x442>
 8000cb6:	bf00      	nop
 8000cb8:	2000011c 	.word	0x2000011c
 8000cbc:	20000094 	.word	0x20000094
 8000cc0:	08005ef4 	.word	0x08005ef4
 8000cc4:	08005f00 	.word	0x08005f00
 8000cc8:	08005f08 	.word	0x08005f08
 8000ccc:	20000090 	.word	0x20000090
 8000cd0:	20000039 	.word	0x20000039
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000100 	.word	0x20000100
 8000cdc:	08005f10 	.word	0x08005f10
 8000ce0:	08005f18 	.word	0x08005f18
 8000ce4:	08005f2c 	.word	0x08005f2c
 8000ce8:	200001c0 	.word	0x200001c0
 8000cec:	200000dc 	.word	0x200000dc
 8000cf0:	08005f30 	.word	0x08005f30
 8000cf4:	08005f34 	.word	0x08005f34
 8000cf8:	20000110 	.word	0x20000110
 8000cfc:	08005f38 	.word	0x08005f38
 8000d00:	08005f50 	.word	0x08005f50
 8000d04:	08005f54 	.word	0x08005f54
 8000d08:	08005f60 	.word	0x08005f60
				}
			}
		}
		while(clear)
		{
			if (MFRC522_Request(PICC_REQALL, serNum) == MI_OK)
 8000d0c:	492f      	ldr	r1, [pc, #188]	; (8000dcc <main+0x444>)
 8000d0e:	2052      	movs	r0, #82	; 0x52
 8000d10:	f000 fb16 	bl	8001340 <MFRC522_Request>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d143      	bne.n	8000da2 <main+0x41a>
			{
				lcd_clear();
 8000d1a:	f7ff fd37 	bl	800078c <lcd_clear>
				lcd_put_cur(0, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fd4a 	bl	80007ba <lcd_put_cur>
				lcd_send_string("----CLEAR----");
 8000d26:	482a      	ldr	r0, [pc, #168]	; (8000dd0 <main+0x448>)
 8000d28:	f7ff fda3 	bl	8000872 <lcd_send_string>
				if (MFRC522_Anticoll(serNum) != MI_OK) 										continue;
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <main+0x444>)
 8000d2e:	f000 fb73 	bl	8001418 <MFRC522_Anticoll>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d000      	beq.n	8000d3a <main+0x3b2>
 8000d38:	e033      	b.n	8000da2 <main+0x41a>
				if (MFRC522_Select(serNum) != MI_OK)										continue;
 8000d3a:	4824      	ldr	r0, [pc, #144]	; (8000dcc <main+0x444>)
 8000d3c:	f000 fc1a 	bl	8001574 <MFRC522_Select>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d000      	beq.n	8000d48 <main+0x3c0>
 8000d46:	e02c      	b.n	8000da2 <main+0x41a>
				if (MFRC522_AuthState(PICC_AUTHENT1A, 4, defaultKeyA, serNum) != MI_OK)		continue;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <main+0x444>)
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <main+0x44c>)
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	2060      	movs	r0, #96	; 0x60
 8000d50:	f000 fcb2 	bl	80016b8 <MFRC522_AuthState>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d000      	beq.n	8000d5c <main+0x3d4>
 8000d5a:	e022      	b.n	8000da2 <main+0x41a>
				if (MFRC522_Read(4, data) != MI_OK)											continue;
 8000d5c:	491e      	ldr	r1, [pc, #120]	; (8000dd8 <main+0x450>)
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f000 fd74 	bl	800184c <MFRC522_Read>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d000      	beq.n	8000d6c <main+0x3e4>
 8000d6a:	e01a      	b.n	8000da2 <main+0x41a>
				while(MFRC522_Write(4, (uint8_t*) "0000000000") != MI_OK);
 8000d6c:	bf00      	nop
 8000d6e:	491b      	ldr	r1, [pc, #108]	; (8000ddc <main+0x454>)
 8000d70:	2004      	movs	r0, #4
 8000d72:	f000 fdef 	bl	8001954 <MFRC522_Write>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f8      	bne.n	8000d6e <main+0x3e6>
				lcd_clear();
 8000d7c:	f7ff fd06 	bl	800078c <lcd_clear>
				lcd_put_cur(0,0);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff fd19 	bl	80007ba <lcd_put_cur>
				lcd_send_string("IN: ");
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <main+0x458>)
 8000d8a:	f7ff fd72 	bl	8000872 <lcd_send_string>
				lcd_put_cur(1, 0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fd12 	bl	80007ba <lcd_put_cur>
				lcd_send_string("OUT: ");
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <main+0x45c>)
 8000d98:	f7ff fd6b 	bl	8000872 <lcd_send_string>
				clear = 0;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <main+0x460>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
		while(clear)
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <main+0x460>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1b0      	bne.n	8000d0c <main+0x384>
 8000daa:	e645      	b.n	8000a38 <main+0xb0>
			if (MFRC522_Anticoll(serNum) != MI_OK) 										continue;
 8000dac:	bf00      	nop
 8000dae:	e643      	b.n	8000a38 <main+0xb0>
			if (MFRC522_Select(serNum) != MI_OK)										continue;
 8000db0:	bf00      	nop
 8000db2:	e641      	b.n	8000a38 <main+0xb0>
			if (MFRC522_AuthState(PICC_AUTHENT1A, 4, defaultKeyA, serNum) != MI_OK)		continue;
 8000db4:	bf00      	nop
 8000db6:	e63f      	b.n	8000a38 <main+0xb0>
			if (MFRC522_Read(4, data) != MI_OK)											continue;
 8000db8:	bf00      	nop
 8000dba:	e63d      	b.n	8000a38 <main+0xb0>
			if (MFRC522_Out_Anticoll(serNum) != MI_OK) 										continue;
 8000dbc:	bf00      	nop
 8000dbe:	e63b      	b.n	8000a38 <main+0xb0>
			if (MFRC522_Select_Out(serNum) != MI_OK)										continue;
 8000dc0:	bf00      	nop
 8000dc2:	e639      	b.n	8000a38 <main+0xb0>
			if (MFRC522_AuthState_Out(PICC_AUTHENT1A, 4, defaultKeyA, serNum) != MI_OK) 	continue;
 8000dc4:	bf00      	nop
 8000dc6:	e637      	b.n	8000a38 <main+0xb0>
			if (MFRC522_Read_Out(4, data) != MI_OK)											continue;
 8000dc8:	bf00      	nop
        if (MFRC522_Request(PICC_REQALL, serNum) == MI_OK)
 8000dca:	e635      	b.n	8000a38 <main+0xb0>
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	08005f74 	.word	0x08005f74
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000100 	.word	0x20000100
 8000ddc:	08005f54 	.word	0x08005f54
 8000de0:	08005f00 	.word	0x08005f00
 8000de4:	08005f08 	.word	0x08005f08
 8000de8:	20000038 	.word	0x20000038

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0320 	add.w	r3, r7, #32
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f005 f866 	bl	8005ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <SystemClock_Config+0xcc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <SystemClock_Config+0xd0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e48:	2309      	movs	r3, #9
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e52:	2301      	movs	r3, #1
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e64:	2348      	movs	r3, #72	; 0x48
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fc33 	bl	80036e0 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e80:	f000 f900 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 fe95 	bl	8003bd0 <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eac:	f000 f8ea 	bl	8001084 <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	; 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <delay_ms>:
 Ftimer = 72 000 000 / Prescaler(7200) = 10 000
 Ttimer = 1/Ftimer = 10^-4 s = 0.1 ms
 => Time ngat tran (ms) = 1ms => Counter Period = 1/0.1 = 10
 ************************************************************************/
void delay_ms(uint16_t ms)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <delay_ms+0x38>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < (ms * 10) );
 8000ed2:	bf00      	nop
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <delay_ms+0x38>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	d3f5      	bcc.n	8000ed4 <delay_ms+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000094 	.word	0x20000094

08000efc <Buzzer_Announ>:

void Buzzer_Announ(uint32_t time)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <Buzzer_Announ+0x30>)
 8000f0a:	f001 ff6b 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(time);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ffd4 	bl	8000ec0 <delay_ms>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <Buzzer_Announ+0x30>)
 8000f1e:	f001 ff61 	bl	8002de4 <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020400 	.word	0x40020400

08000f30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f40:	d01a      	beq.n	8000f78 <HAL_GPIO_EXTI_Callback+0x48>
 8000f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f46:	dc1c      	bgt.n	8000f82 <HAL_GPIO_EXTI_Callback+0x52>
 8000f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4c:	d00f      	beq.n	8000f6e <HAL_GPIO_EXTI_Callback+0x3e>
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f52:	dc16      	bgt.n	8000f82 <HAL_GPIO_EXTI_Callback+0x52>
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d005      	beq.n	8000f64 <HAL_GPIO_EXTI_Callback+0x34>
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d112      	bne.n	8000f82 <HAL_GPIO_EXTI_Callback+0x52>
	case BUTTON_OUT_Pin: {
//		htim2.Instance->CCR1 = 118;
		clear = 1;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x60>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
		break;
 8000f62:	e00e      	b.n	8000f82 <HAL_GPIO_EXTI_Callback+0x52>
	}
	case BUTTON_IN_Pin: {
		htim2.Instance->CCR2 = 30;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	221e      	movs	r2, #30
 8000f6a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000f6c:	e009      	b.n	8000f82 <HAL_GPIO_EXTI_Callback+0x52>
	}
	case SENSOR_OUT_Pin: {
		htim2.Instance->CCR1 = 65;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2241      	movs	r2, #65	; 0x41
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000f76:	e004      	b.n	8000f82 <HAL_GPIO_EXTI_Callback+0x52>
	}
	case SENSOR_IN_Pin: {
		htim2.Instance->CCR2 = 80;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2250      	movs	r2, #80	; 0x50
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000f80:	bf00      	nop
	}
	}
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000038 	.word	0x20000038
 8000f94:	2000011c 	.word	0x2000011c

08000f98 <display>:

void display(uint8_t n) //IN --> n = 4; OUT --> n = 5;
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t x;
	if((char)numData[9] == '-')
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <display+0x58>)
 8000fa4:	7a5b      	ldrb	r3, [r3, #9]
 8000fa6:	2b2d      	cmp	r3, #45	; 0x2d
 8000fa8:	d102      	bne.n	8000fb0 <display+0x18>
		x = 9;
 8000faa:	2309      	movs	r3, #9
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e001      	b.n	8000fb4 <display+0x1c>
	else
		x = 10;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < x; j++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	e011      	b.n	8000fde <display+0x46>
	{
		lcd_put_cur((n - 4), j + n);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	1f18      	subs	r0, r3, #4
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fbf8 	bl	80007ba <lcd_put_cur>
		lcd_send_data((char)numData[j]);
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <display+0x58>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fbaa 	bl	800072c <lcd_send_data>
	for(int j = 0; j < x; j++)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dbe9      	blt.n	8000fba <display+0x22>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000110 	.word	0x20000110

08000ff4 <CompareData>:

uint8_t CompareData()
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
	uint8_t x;
	if((char)numData[9] == '-')
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <CompareData+0x54>)
 8000ffc:	7a5b      	ldrb	r3, [r3, #9]
 8000ffe:	2b2d      	cmp	r3, #45	; 0x2d
 8001000:	d102      	bne.n	8001008 <CompareData+0x14>
		x = 9;
 8001002:	2309      	movs	r3, #9
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e001      	b.n	800100c <CompareData+0x18>
	else
		x = 10;
 8001008:	230a      	movs	r3, #10
 800100a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < x; i++) {
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	e00e      	b.n	8001030 <CompareData+0x3c>
		if (data[i] != numData[i])
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <CompareData+0x58>)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	4413      	add	r3, r2
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	490b      	ldr	r1, [pc, #44]	; (8001048 <CompareData+0x54>)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	440b      	add	r3, r1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d001      	beq.n	800102a <CompareData+0x36>
		{
			return MI_ERR;
 8001026:	2302      	movs	r3, #2
 8001028:	e007      	b.n	800103a <CompareData+0x46>
	for (int i = 0; i < x; i++) {
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbec      	blt.n	8001012 <CompareData+0x1e>
		}
	}
	return MI_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000110 	.word	0x20000110
 800104c:	20000100 	.word	0x20000100

08001050 <clear_numData>:

void clear_numData()
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
	for(int i = 0; i < 10; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e007      	b.n	800106c <clear_numData+0x1c>
	{
		numData[i] = 0;
 800105c:	4a08      	ldr	r2, [pc, #32]	; (8001080 <clear_numData+0x30>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 10; i++)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3301      	adds	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b09      	cmp	r3, #9
 8001070:	ddf4      	ble.n	800105c <clear_numData+0xc>
	}
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000110 	.word	0x20000110

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <SPI_transfer>:

//Initilize the pinouts. GPIO for SPI AF
/*******************************************************************************
********************************************************************************/
unsigned char SPI_transfer(unsigned char data)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	//uint32_t val;
	//This function is just exactly the same as void 'SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)'
	SPI1->DR = data; // write data to be transmitted to the SPI data register
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <SPI_transfer+0x4c>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	60d3      	str	r3, [r2, #12]
	while( !(SPI1->SR & SPI_FLAG_TXE) ); // wait until transmit complete
 80010a0:	bf00      	nop
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <SPI_transfer+0x4c>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f9      	beq.n	80010a2 <SPI_transfer+0x12>
	while( !(SPI1->SR & SPI_FLAG_RXNE) ); // wait until receive complete
 80010ae:	bf00      	nop
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <SPI_transfer+0x4c>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f9      	beq.n	80010b0 <SPI_transfer+0x20>
	while( SPI1->SR & SPI_FLAG_BSY ); // wait until SPI is not busy anymore
 80010bc:	bf00      	nop
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <SPI_transfer+0x4c>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f9      	bne.n	80010be <SPI_transfer+0x2e>
	return SPI1->DR; // return received data from SPI data register
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SPI_transfer+0x4c>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	b2db      	uxtb	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40013000 	.word	0x40013000

080010e0 <MFRC522_Reset>:
	return MI_OK;
}
/*******************************************************************************
********************************************************************************/
uint8_t MFRC522_Reset(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	MF522_CS_DISABLE;
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	481b      	ldr	r0, [pc, #108]	; (8001158 <MFRC522_Reset+0x78>)
 80010ea:	f001 fe7b 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(8);
 80010ee:	2008      	movs	r0, #8
 80010f0:	f7ff fee6 	bl	8000ec0 <delay_ms>
	MF522_RST_RESET;
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	4817      	ldr	r0, [pc, #92]	; (8001158 <MFRC522_Reset+0x78>)
 80010fa:	f001 fe73 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fede 	bl	8000ec0 <delay_ms>
	MF522_RST_SET;
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MFRC522_Reset+0x78>)
 800110a:	f001 fe6b 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fed6 	bl	8000ec0 <delay_ms>
  MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_RESETPHASE);
 8001114:	210f      	movs	r1, #15
 8001116:	2001      	movs	r0, #1
 8001118:	f000 f8ba 	bl	8001290 <MFRC522_WriteRegister>
  delay_ms(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff fecf 	bl	8000ec0 <delay_ms>

  MFRC522_WriteRegister(MODE_REGISTER,0x29);     
 8001122:	2129      	movs	r1, #41	; 0x29
 8001124:	2011      	movs	r0, #17
 8001126:	f000 f8b3 	bl	8001290 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TIMER_RELOAD_H_REGISTER,0);	
 800112a:	2100      	movs	r1, #0
 800112c:	202c      	movs	r0, #44	; 0x2c
 800112e:	f000 f8af 	bl	8001290 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TIMER_RELOAD_L_REGISTER,30);           
 8001132:	211e      	movs	r1, #30
 8001134:	202d      	movs	r0, #45	; 0x2d
 8001136:	f000 f8ab 	bl	8001290 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TMODE_REGISTER,0x8D); //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800113a:	218d      	movs	r1, #141	; 0x8d
 800113c:	202a      	movs	r0, #42	; 0x2a
 800113e:	f000 f8a7 	bl	8001290 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TIMER_PRESCALER_REGISTER,0x3E);
 8001142:	213e      	movs	r1, #62	; 0x3e
 8001144:	202b      	movs	r0, #43	; 0x2b
 8001146:	f000 f8a3 	bl	8001290 <MFRC522_WriteRegister>
  MFRC522_WriteRegister(TX_ASK_REGISTER,0x40);
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	2015      	movs	r0, #21
 800114e:	f000 f89f 	bl	8001290 <MFRC522_WriteRegister>
   
  return MI_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020000 	.word	0x40020000

0800115c <MFRC522_Out_Reset>:

uint8_t MFRC522_Out_Reset(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  __CS_DISABLE;
 8001160:	2201      	movs	r2, #1
 8001162:	2104      	movs	r1, #4
 8001164:	481b      	ldr	r0, [pc, #108]	; (80011d4 <MFRC522_Out_Reset+0x78>)
 8001166:	f001 fe3d 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(8);
 800116a:	2008      	movs	r0, #8
 800116c:	f7ff fea8 	bl	8000ec0 <delay_ms>
  __RST_RESET;
 8001170:	2200      	movs	r2, #0
 8001172:	2108      	movs	r1, #8
 8001174:	4817      	ldr	r0, [pc, #92]	; (80011d4 <MFRC522_Out_Reset+0x78>)
 8001176:	f001 fe35 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fea0 	bl	8000ec0 <delay_ms>
  __RST_SET;
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MFRC522_Out_Reset+0x78>)
 8001186:	f001 fe2d 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fe98 	bl	8000ec0 <delay_ms>
  MFRC522_Out_WriteRegister(COMMAND_REGISTER,MFRC522_RESETPHASE);
 8001190:	210f      	movs	r1, #15
 8001192:	2001      	movs	r0, #1
 8001194:	f000 f8a8 	bl	80012e8 <MFRC522_Out_WriteRegister>
  delay_ms(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fe91 	bl	8000ec0 <delay_ms>
  
  MFRC522_Out_WriteRegister(MODE_REGISTER,0x29);     
 800119e:	2129      	movs	r1, #41	; 0x29
 80011a0:	2011      	movs	r0, #17
 80011a2:	f000 f8a1 	bl	80012e8 <MFRC522_Out_WriteRegister>
  MFRC522_Out_WriteRegister(TIMER_RELOAD_H_REGISTER,0); 
 80011a6:	2100      	movs	r1, #0
 80011a8:	202c      	movs	r0, #44	; 0x2c
 80011aa:	f000 f89d 	bl	80012e8 <MFRC522_Out_WriteRegister>
  MFRC522_Out_WriteRegister(TIMER_RELOAD_L_REGISTER,30);           
 80011ae:	211e      	movs	r1, #30
 80011b0:	202d      	movs	r0, #45	; 0x2d
 80011b2:	f000 f899 	bl	80012e8 <MFRC522_Out_WriteRegister>
  MFRC522_Out_WriteRegister(TMODE_REGISTER,0x8D); //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80011b6:	218d      	movs	r1, #141	; 0x8d
 80011b8:	202a      	movs	r0, #42	; 0x2a
 80011ba:	f000 f895 	bl	80012e8 <MFRC522_Out_WriteRegister>
  MFRC522_Out_WriteRegister(TIMER_PRESCALER_REGISTER,0x3E);
 80011be:	213e      	movs	r1, #62	; 0x3e
 80011c0:	202b      	movs	r0, #43	; 0x2b
 80011c2:	f000 f891 	bl	80012e8 <MFRC522_Out_WriteRegister>
  MFRC522_Out_WriteRegister(TX_ASK_REGISTER,0x40);
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	2015      	movs	r0, #21
 80011ca:	f000 f88d 	bl	80012e8 <MFRC522_Out_WriteRegister>
   
  return MI_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <MFRC522_ReadRegister>:
/*******************************************************************************
********************************************************************************/
uint8_t MFRC522_ReadRegister(uint8_t Address)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  uint8_t val;
	MF522_CS_ENABLE;
 80011e2:	2200      	movs	r2, #0
 80011e4:	2104      	movs	r1, #4
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <MFRC522_ReadRegister+0x58>)
 80011e8:	f001 fdfc 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fe67 	bl	8000ec0 <delay_ms>
	//address format:1XXXXXX0
	SPI_transfer(((Address<<1)&0x7E) | 0x80);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001202:	b25b      	sxtb	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff42 	bl	8001090 <SPI_transfer>
	val = SPI_transfer(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff3f 	bl	8001090 <SPI_transfer>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
	MF522_CS_DISABLE;
 8001216:	2201      	movs	r2, #1
 8001218:	2104      	movs	r1, #4
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MFRC522_ReadRegister+0x58>)
 800121c:	f001 fde2 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fe4d 	bl	8000ec0 <delay_ms>
	return val;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020000 	.word	0x40020000

08001234 <MFRC522_Out_ReadRegister>:

uint8_t MFRC522_Out_ReadRegister(uint8_t Address)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  uint8_t val;
  __CS_ENABLE;
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	4812      	ldr	r0, [pc, #72]	; (800128c <MFRC522_Out_ReadRegister+0x58>)
 8001244:	f001 fdce 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fe39 	bl	8000ec0 <delay_ms>
  //address format:1XXXXXX0
  SPI_transfer(((Address<<1)&0x7E) | 0x80);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	b25b      	sxtb	r3, r3
 8001254:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001258:	b25b      	sxtb	r3, r3
 800125a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800125e:	b25b      	sxtb	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff14 	bl	8001090 <SPI_transfer>
  val = SPI_transfer(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ff11 	bl	8001090 <SPI_transfer>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
  __CS_DISABLE;
 8001272:	2201      	movs	r2, #1
 8001274:	2104      	movs	r1, #4
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MFRC522_Out_ReadRegister+0x58>)
 8001278:	f001 fdb4 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff fe1f 	bl	8000ec0 <delay_ms>
  return val;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <MFRC522_WriteRegister>:
/*******************************************************************************
********************************************************************************/
void MFRC522_WriteRegister(uint8_t Address, uint8_t value)
{  
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	MF522_CS_ENABLE;
 80012a0:	2200      	movs	r2, #0
 80012a2:	2104      	movs	r1, #4
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MFRC522_WriteRegister+0x54>)
 80012a6:	f001 fd9d 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fe08 	bl	8000ec0 <delay_ms>
	//address format:0XXXXXX0
	SPI_transfer((Address<<1)&0x7E);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fee7 	bl	8001090 <SPI_transfer>
	SPI_transfer(value);
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fee3 	bl	8001090 <SPI_transfer>
	MF522_CS_DISABLE;
 80012ca:	2201      	movs	r2, #1
 80012cc:	2104      	movs	r1, #4
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MFRC522_WriteRegister+0x54>)
 80012d0:	f001 fd88 	bl	8002de4 <HAL_GPIO_WritePin>
	delay_ms(1);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fdf3 	bl	8000ec0 <delay_ms>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020000 	.word	0x40020000

080012e8 <MFRC522_Out_WriteRegister>:

void MFRC522_Out_WriteRegister(uint8_t Address, uint8_t value)
{  
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
  __CS_ENABLE;
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <MFRC522_Out_WriteRegister+0x54>)
 80012fe:	f001 fd71 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fddc 	bl	8000ec0 <delay_ms>
  //address format:0XXXXXX0
  SPI_transfer((Address<<1)&0x7E);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff febb 	bl	8001090 <SPI_transfer>
  SPI_transfer(value);
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff feb7 	bl	8001090 <SPI_transfer>
  __CS_DISABLE;
 8001322:	2201      	movs	r2, #1
 8001324:	2104      	movs	r1, #4
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MFRC522_Out_WriteRegister+0x54>)
 8001328:	f001 fd5c 	bl	8002de4 <HAL_GPIO_WritePin>
  delay_ms(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff fdc7 	bl	8000ec0 <delay_ms>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <MFRC522_Request>:
                *pTagType   :    
Tra Ve      :   OK          :    Co tim thay thiet bi.
                NOT_OK      :    Chua tim thay thiet bi.
********************************************************************************/
uint8_t MFRC522_Request(uint8_t req_code,uint8_t* pTagType)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af02      	add	r7, sp, #8
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
   uint8_t status=MI_ERR;  
 800134c:	2302      	movs	r3, #2
 800134e:	77fb      	strb	r3, [r7, #31]
   uint16_t  Length;
   uint8_t Buffer[MAXRLEN]; 

   ClearBitMask(STATUS2_REGISTER,0x08);
 8001350:	2108      	movs	r1, #8
 8001352:	2008      	movs	r0, #8
 8001354:	f000 fcae 	bl	8001cb4 <ClearBitMask>
   MFRC522_WriteRegister(BIT_FRAMING_REGISTER,0x07);
 8001358:	2107      	movs	r1, #7
 800135a:	200d      	movs	r0, #13
 800135c:	f7ff ff98 	bl	8001290 <MFRC522_WriteRegister>
   SetBitMask(TX_CONTROL_REGISTER,0x03);
 8001360:	2103      	movs	r1, #3
 8001362:	2014      	movs	r0, #20
 8001364:	f000 fc6c 	bl	8001c40 <SetBitMask>
   Buffer[0] = req_code;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	723b      	strb	r3, [r7, #8]
   status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,1,Buffer,&Length);
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	f107 0108 	add.w	r1, r7, #8
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4613      	mov	r3, r2
 800137c:	2201      	movs	r2, #1
 800137e:	200c      	movs	r0, #12
 8001380:	f000 fcdc 	bl	8001d3c <MFRC522_ComMF522>
 8001384:	4603      	mov	r3, r0
 8001386:	77fb      	strb	r3, [r7, #31]
   if ((status == MI_OK) && (Length == 0x10))
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <MFRC522_Request+0x62>
 800138e:	8bbb      	ldrh	r3, [r7, #28]
 8001390:	2b10      	cmp	r3, #16
 8001392:	d106      	bne.n	80013a2 <MFRC522_Request+0x62>
   {    
      *pTagType     = Buffer[0];
 8001394:	7a3a      	ldrb	r2, [r7, #8]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	701a      	strb	r2, [r3, #0]
      *(pTagType+1) = Buffer[1];
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	7a7a      	ldrb	r2, [r7, #9]
 80013a0:	701a      	strb	r2, [r3, #0]
   }
   return status;
 80013a2:	7ffb      	ldrb	r3, [r7, #31]
} 
 80013a4:	4618      	mov	r0, r3
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MFRC522_Out_Request>:

uint8_t MFRC522_Out_Request(uint8_t req_code,uint8_t* pTagType)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
   uint8_t status=MI_ERR;  
 80013b8:	2302      	movs	r3, #2
 80013ba:	77fb      	strb	r3, [r7, #31]
   uint16_t  Length;
   uint8_t Buffer[MAXRLEN]; 

   ClearBitMaskOut(STATUS2_REGISTER,0x08);
 80013bc:	2108      	movs	r1, #8
 80013be:	2008      	movs	r0, #8
 80013c0:	f000 fc9a 	bl	8001cf8 <ClearBitMaskOut>
   MFRC522_Out_WriteRegister(BIT_FRAMING_REGISTER,0x07);
 80013c4:	2107      	movs	r1, #7
 80013c6:	200d      	movs	r0, #13
 80013c8:	f7ff ff8e 	bl	80012e8 <MFRC522_Out_WriteRegister>
   SetBitMaskOut(TX_CONTROL_REGISTER,0x03);
 80013cc:	2103      	movs	r1, #3
 80013ce:	2014      	movs	r0, #20
 80013d0:	f000 fc53 	bl	8001c7a <SetBitMaskOut>
   Buffer[0] = req_code;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	723b      	strb	r3, [r7, #8]
   status = MFRC522_ComMF522_Out(MFRC522_TRANSCEIVE,Buffer,1,Buffer,&Length);
 80013d8:	f107 0208 	add.w	r2, r7, #8
 80013dc:	f107 0108 	add.w	r1, r7, #8
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4613      	mov	r3, r2
 80013e8:	2201      	movs	r2, #1
 80013ea:	200c      	movs	r0, #12
 80013ec:	f000 fd7d 	bl	8001eea <MFRC522_ComMF522_Out>
 80013f0:	4603      	mov	r3, r0
 80013f2:	77fb      	strb	r3, [r7, #31]
   if ((status == MI_OK) && (Length == 0x10))
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <MFRC522_Out_Request+0x62>
 80013fa:	8bbb      	ldrh	r3, [r7, #28]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	d106      	bne.n	800140e <MFRC522_Out_Request+0x62>
   {    
      *pTagType     = Buffer[0];
 8001400:	7a3a      	ldrb	r2, [r7, #8]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	701a      	strb	r2, [r3, #0]
      *(pTagType+1) = Buffer[1];
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	7a7a      	ldrb	r2, [r7, #9]
 800140c:	701a      	strb	r2, [r3, #0]
   }
   return status;
 800140e:	7ffb      	ldrb	r3, [r7, #31]
} 
 8001410:	4618      	mov	r0, r3
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MFRC522_Anticoll>:
Tham Bien   :   *pSnr       :    Vung nho luu tru Serial Number
Tra Ve      :   OK          :    Thanh cong.
                NOT_OK      :    That bai.
********************************************************************************/
uint8_t MFRC522_Anticoll(uint8_t *pSnr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i,snr_check=0;
 8001420:	2300      	movs	r3, #0
 8001422:	777b      	strb	r3, [r7, #29]
    uint16_t  Length;
    uint8_t Buffer[MAXRLEN]; 
    
    ClearBitMask(STATUS2_REGISTER,0x08);
 8001424:	2108      	movs	r1, #8
 8001426:	2008      	movs	r0, #8
 8001428:	f000 fc44 	bl	8001cb4 <ClearBitMask>
    MFRC522_WriteRegister(BIT_FRAMING_REGISTER,0x00);
 800142c:	2100      	movs	r1, #0
 800142e:	200d      	movs	r0, #13
 8001430:	f7ff ff2e 	bl	8001290 <MFRC522_WriteRegister>
    ClearBitMask(COLLISION_REGISTER,0x80);
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	200e      	movs	r0, #14
 8001438:	f000 fc3c 	bl	8001cb4 <ClearBitMask>
 
    Buffer[0] = PICC_ANTICOLL1;
 800143c:	2393      	movs	r3, #147	; 0x93
 800143e:	723b      	strb	r3, [r7, #8]
    Buffer[1] = 0x20;
 8001440:	2320      	movs	r3, #32
 8001442:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,2,Buffer,&Length);
 8001444:	f107 0208 	add.w	r2, r7, #8
 8001448:	f107 0108 	add.w	r1, r7, #8
 800144c:	f107 031a 	add.w	r3, r7, #26
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	2202      	movs	r2, #2
 8001456:	200c      	movs	r0, #12
 8001458:	f000 fc70 	bl	8001d3c <MFRC522_ComMF522>
 800145c:	4603      	mov	r3, r0
 800145e:	77fb      	strb	r3, [r7, #31]

    if (status == MI_OK)
 8001460:	7ffb      	ldrb	r3, [r7, #31]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d126      	bne.n	80014b4 <MFRC522_Anticoll+0x9c>
    {
      for (i=0; i<4; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	77bb      	strb	r3, [r7, #30]
 800146a:	e015      	b.n	8001498 <MFRC522_Anticoll+0x80>
      {   
        *(pSnr+i)  = Buffer[i];
 800146c:	7fba      	ldrb	r2, [r7, #30]
 800146e:	7fbb      	ldrb	r3, [r7, #30]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	440b      	add	r3, r1
 8001474:	f107 0120 	add.w	r1, r7, #32
 8001478:	440a      	add	r2, r1
 800147a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800147e:	701a      	strb	r2, [r3, #0]
        snr_check ^= Buffer[i];
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	f107 0220 	add.w	r2, r7, #32
 8001486:	4413      	add	r3, r2
 8001488:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800148c:	7f7b      	ldrb	r3, [r7, #29]
 800148e:	4053      	eors	r3, r2
 8001490:	777b      	strb	r3, [r7, #29]
      for (i=0; i<4; i++)
 8001492:	7fbb      	ldrb	r3, [r7, #30]
 8001494:	3301      	adds	r3, #1
 8001496:	77bb      	strb	r3, [r7, #30]
 8001498:	7fbb      	ldrb	r3, [r7, #30]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d9e6      	bls.n	800146c <MFRC522_Anticoll+0x54>
      }
      if (snr_check != Buffer[i])       status = MI_ERR;    
 800149e:	7fbb      	ldrb	r3, [r7, #30]
 80014a0:	f107 0220 	add.w	r2, r7, #32
 80014a4:	4413      	add	r3, r2
 80014a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014aa:	7f7a      	ldrb	r2, [r7, #29]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <MFRC522_Anticoll+0x9c>
 80014b0:	2302      	movs	r3, #2
 80014b2:	77fb      	strb	r3, [r7, #31]
    }
    
    SetBitMask(COLLISION_REGISTER,0x80);
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	200e      	movs	r0, #14
 80014b8:	f000 fbc2 	bl	8001c40 <SetBitMask>
    return status;
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <MFRC522_Out_Anticoll>:

uint8_t MFRC522_Out_Anticoll(uint8_t *pSnr)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b08a      	sub	sp, #40	; 0x28
 80014ca:	af02      	add	r7, sp, #8
 80014cc:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i,snr_check=0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	777b      	strb	r3, [r7, #29]
    uint16_t  Length;
    uint8_t Buffer[MAXRLEN]; 
    
    ClearBitMaskOut(STATUS2_REGISTER,0x08);
 80014d2:	2108      	movs	r1, #8
 80014d4:	2008      	movs	r0, #8
 80014d6:	f000 fc0f 	bl	8001cf8 <ClearBitMaskOut>
    MFRC522_Out_WriteRegister(BIT_FRAMING_REGISTER,0x00);
 80014da:	2100      	movs	r1, #0
 80014dc:	200d      	movs	r0, #13
 80014de:	f7ff ff03 	bl	80012e8 <MFRC522_Out_WriteRegister>
    ClearBitMaskOut(COLLISION_REGISTER,0x80);
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	200e      	movs	r0, #14
 80014e6:	f000 fc07 	bl	8001cf8 <ClearBitMaskOut>
 
    Buffer[0] = PICC_ANTICOLL1;
 80014ea:	2393      	movs	r3, #147	; 0x93
 80014ec:	723b      	strb	r3, [r7, #8]
    Buffer[1] = 0x20;
 80014ee:	2320      	movs	r3, #32
 80014f0:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ComMF522_Out(MFRC522_TRANSCEIVE,Buffer,2,Buffer,&Length);
 80014f2:	f107 0208 	add.w	r2, r7, #8
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	f107 031a 	add.w	r3, r7, #26
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	2202      	movs	r2, #2
 8001504:	200c      	movs	r0, #12
 8001506:	f000 fcf0 	bl	8001eea <MFRC522_ComMF522_Out>
 800150a:	4603      	mov	r3, r0
 800150c:	77fb      	strb	r3, [r7, #31]

    if (status == MI_OK)
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d126      	bne.n	8001562 <MFRC522_Out_Anticoll+0x9c>
    {
      for (i=0; i<4; i++)
 8001514:	2300      	movs	r3, #0
 8001516:	77bb      	strb	r3, [r7, #30]
 8001518:	e015      	b.n	8001546 <MFRC522_Out_Anticoll+0x80>
      {   
        *(pSnr+i)  = Buffer[i];
 800151a:	7fba      	ldrb	r2, [r7, #30]
 800151c:	7fbb      	ldrb	r3, [r7, #30]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	440b      	add	r3, r1
 8001522:	f107 0120 	add.w	r1, r7, #32
 8001526:	440a      	add	r2, r1
 8001528:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800152c:	701a      	strb	r2, [r3, #0]
        snr_check ^= Buffer[i];
 800152e:	7fbb      	ldrb	r3, [r7, #30]
 8001530:	f107 0220 	add.w	r2, r7, #32
 8001534:	4413      	add	r3, r2
 8001536:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800153a:	7f7b      	ldrb	r3, [r7, #29]
 800153c:	4053      	eors	r3, r2
 800153e:	777b      	strb	r3, [r7, #29]
      for (i=0; i<4; i++)
 8001540:	7fbb      	ldrb	r3, [r7, #30]
 8001542:	3301      	adds	r3, #1
 8001544:	77bb      	strb	r3, [r7, #30]
 8001546:	7fbb      	ldrb	r3, [r7, #30]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d9e6      	bls.n	800151a <MFRC522_Out_Anticoll+0x54>
      }
      if (snr_check != Buffer[i])       status = MI_ERR;    
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	f107 0220 	add.w	r2, r7, #32
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001558:	7f7a      	ldrb	r2, [r7, #29]
 800155a:	429a      	cmp	r2, r3
 800155c:	d001      	beq.n	8001562 <MFRC522_Out_Anticoll+0x9c>
 800155e:	2302      	movs	r3, #2
 8001560:	77fb      	strb	r3, [r7, #31]
    }
    
    SetBitMaskOut(COLLISION_REGISTER,0x80);
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	200e      	movs	r0, #14
 8001566:	f000 fb88 	bl	8001c7a <SetBitMaskOut>
    return status;
 800156a:	7ffb      	ldrb	r3, [r7, #31]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <MFRC522_Select>:
Tham Bien   :   *pSnr       :    Vung nho luu tru Serial Number Card can giao tiep
Tra Ve      :   OK          :    Giao tiep thanh cong.
                NOT_OK      :    Giao tiep that bai.
********************************************************************************/
uint8_t MFRC522_Select(uint8_t *pSnr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af02      	add	r7, sp, #8
 800157a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
    uint16_t  Length;
    uint8_t Buffer[MAXRLEN]; 
    
    Buffer[0] = PICC_ANTICOLL1;
 800157c:	2393      	movs	r3, #147	; 0x93
 800157e:	723b      	strb	r3, [r7, #8]
    Buffer[1] = 0x70;
 8001580:	2370      	movs	r3, #112	; 0x70
 8001582:	727b      	strb	r3, [r7, #9]
    Buffer[6] = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
    for (i=0; i<4; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	77bb      	strb	r3, [r7, #30]
 800158c:	e015      	b.n	80015ba <MFRC522_Select+0x46>
    {
       Buffer[i+2] = *(pSnr+i);
 800158e:	7fbb      	ldrb	r3, [r7, #30]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	441a      	add	r2, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	3302      	adds	r3, #2
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	f107 0120 	add.w	r1, r7, #32
 800159e:	440b      	add	r3, r1
 80015a0:	f803 2c18 	strb.w	r2, [r3, #-24]
       Buffer[6]  ^= *(pSnr+i);
 80015a4:	7bba      	ldrb	r2, [r7, #14]
 80015a6:	7fbb      	ldrb	r3, [r7, #30]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	440b      	add	r3, r1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4053      	eors	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	73bb      	strb	r3, [r7, #14]
    for (i=0; i<4; i++)
 80015b4:	7fbb      	ldrb	r3, [r7, #30]
 80015b6:	3301      	adds	r3, #1
 80015b8:	77bb      	strb	r3, [r7, #30]
 80015ba:	7fbb      	ldrb	r3, [r7, #30]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d9e6      	bls.n	800158e <MFRC522_Select+0x1a>
    }
    CalulateCRC(Buffer,7,&Buffer[7]);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	1dda      	adds	r2, r3, #7
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa9d 	bl	8001b0c <CalulateCRC>
  
    ClearBitMask(STATUS2_REGISTER,0x08);
 80015d2:	2108      	movs	r1, #8
 80015d4:	2008      	movs	r0, #8
 80015d6:	f000 fb6d 	bl	8001cb4 <ClearBitMask>

    status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,9,Buffer,&Length);
 80015da:	f107 0208 	add.w	r2, r7, #8
 80015de:	f107 0108 	add.w	r1, r7, #8
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	2209      	movs	r2, #9
 80015ec:	200c      	movs	r0, #12
 80015ee:	f000 fba5 	bl	8001d3c <MFRC522_ComMF522>
 80015f2:	4603      	mov	r3, r0
 80015f4:	77fb      	strb	r3, [r7, #31]
    
    if ((status == MI_OK) && (Length == 0x18))
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <MFRC522_Select+0x94>
 80015fc:	8bbb      	ldrh	r3, [r7, #28]
 80015fe:	2b18      	cmp	r3, #24
 8001600:	d102      	bne.n	8001608 <MFRC522_Select+0x94>
    {   status = MI_OK;  }
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e001      	b.n	800160c <MFRC522_Select+0x98>
    else
    {   status = MI_ERR;    }
 8001608:	2302      	movs	r3, #2
 800160a:	77fb      	strb	r3, [r7, #31]

    return status;
 800160c:	7ffb      	ldrb	r3, [r7, #31]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <MFRC522_Select_Out>:

uint8_t MFRC522_Select_Out(uint8_t *pSnr)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b08a      	sub	sp, #40	; 0x28
 800161a:	af02      	add	r7, sp, #8
 800161c:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
    uint16_t  Length;
    uint8_t Buffer[MAXRLEN]; 
    
    Buffer[0] = PICC_ANTICOLL1;
 800161e:	2393      	movs	r3, #147	; 0x93
 8001620:	723b      	strb	r3, [r7, #8]
    Buffer[1] = 0x70;
 8001622:	2370      	movs	r3, #112	; 0x70
 8001624:	727b      	strb	r3, [r7, #9]
    Buffer[6] = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	73bb      	strb	r3, [r7, #14]
    for (i=0; i<4; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	77bb      	strb	r3, [r7, #30]
 800162e:	e015      	b.n	800165c <MFRC522_Select_Out+0x46>
    {
       Buffer[i+2] = *(pSnr+i);
 8001630:	7fbb      	ldrb	r3, [r7, #30]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	441a      	add	r2, r3
 8001636:	7fbb      	ldrb	r3, [r7, #30]
 8001638:	3302      	adds	r3, #2
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	f107 0120 	add.w	r1, r7, #32
 8001640:	440b      	add	r3, r1
 8001642:	f803 2c18 	strb.w	r2, [r3, #-24]
       Buffer[6]  ^= *(pSnr+i);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7fbb      	ldrb	r3, [r7, #30]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	440b      	add	r3, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4053      	eors	r3, r2
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
    for (i=0; i<4; i++)
 8001656:	7fbb      	ldrb	r3, [r7, #30]
 8001658:	3301      	adds	r3, #1
 800165a:	77bb      	strb	r3, [r7, #30]
 800165c:	7fbb      	ldrb	r3, [r7, #30]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d9e6      	bls.n	8001630 <MFRC522_Select_Out+0x1a>
    }
    CalulateCRCOut(Buffer,7,&Buffer[7]);
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	1dda      	adds	r2, r3, #7
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	2107      	movs	r1, #7
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fa99 	bl	8001ba6 <CalulateCRCOut>
  
    ClearBitMaskOut(STATUS2_REGISTER,0x08);
 8001674:	2108      	movs	r1, #8
 8001676:	2008      	movs	r0, #8
 8001678:	f000 fb3e 	bl	8001cf8 <ClearBitMaskOut>

    status = MFRC522_ComMF522_Out(MFRC522_TRANSCEIVE,Buffer,9,Buffer,&Length);
 800167c:	f107 0208 	add.w	r2, r7, #8
 8001680:	f107 0108 	add.w	r1, r7, #8
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4613      	mov	r3, r2
 800168c:	2209      	movs	r2, #9
 800168e:	200c      	movs	r0, #12
 8001690:	f000 fc2b 	bl	8001eea <MFRC522_ComMF522_Out>
 8001694:	4603      	mov	r3, r0
 8001696:	77fb      	strb	r3, [r7, #31]
    
    if ((status == MI_OK) && (Length == 0x18))
 8001698:	7ffb      	ldrb	r3, [r7, #31]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <MFRC522_Select_Out+0x94>
 800169e:	8bbb      	ldrh	r3, [r7, #28]
 80016a0:	2b18      	cmp	r3, #24
 80016a2:	d102      	bne.n	80016aa <MFRC522_Select_Out+0x94>
    {   status = MI_OK;  }
 80016a4:	2300      	movs	r3, #0
 80016a6:	77fb      	strb	r3, [r7, #31]
 80016a8:	e001      	b.n	80016ae <MFRC522_Select_Out+0x98>
    else
    {   status = MI_ERR;    }
 80016aa:	2302      	movs	r3, #2
 80016ac:	77fb      	strb	r3, [r7, #31]

    return status;
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <MFRC522_AuthState>:
Byte 1     :    Block Addr
Byte 2-7   :    Sector Key Byte 0 - 5  
Byte 8-11  :    Card Serial Number Byte 0 - 4
**************************************************************************************/
uint8_t MFRC522_AuthState(uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	460b      	mov	r3, r1
 80016c8:	73bb      	strb	r3, [r7, #14]
    uint8_t status;
    uint16_t  Length;
    uint8_t i,Buffer[MAXRLEN]; 

    Buffer[0] = auth_mode;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	743b      	strb	r3, [r7, #16]
    Buffer[1] = addr;
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	747b      	strb	r3, [r7, #17]
    for (i=0; i<6; i++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016d8:	e011      	b.n	80016fe <MFRC522_AuthState+0x46>
    {    
          Buffer[i+2] = *(pKey+i);   }
 80016da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	441a      	add	r2, r3
 80016e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e6:	3302      	adds	r3, #2
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016ee:	440b      	add	r3, r1
 80016f0:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (i=0; i<6; i++)
 80016f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001702:	2b05      	cmp	r3, #5
 8001704:	d9e9      	bls.n	80016da <MFRC522_AuthState+0x22>
    for (i=0; i<4; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800170c:	e011      	b.n	8001732 <MFRC522_AuthState+0x7a>
    {    Buffer[i+8] = *(pSnr+i);   }    
 800170e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	441a      	add	r2, r3
 8001716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171a:	3308      	adds	r3, #8
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001722:	440b      	add	r3, r1
 8001724:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (i=0; i<4; i++)
 8001728:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800172c:	3301      	adds	r3, #1
 800172e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001732:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001736:	2b03      	cmp	r3, #3
 8001738:	d9e9      	bls.n	800170e <MFRC522_AuthState+0x56>
    status = MFRC522_ComMF522(MFRC522_AUTHENT,Buffer,12,Buffer,&Length);
 800173a:	f107 0210 	add.w	r2, r7, #16
 800173e:	f107 0110 	add.w	r1, r7, #16
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	220c      	movs	r2, #12
 800174c:	200e      	movs	r0, #14
 800174e:	f000 faf5 	bl	8001d3c <MFRC522_ComMF522>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((status != MI_OK) || (!(MFRC522_ReadRegister(STATUS2_REGISTER) & 0x08)))
 8001758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <MFRC522_AuthState+0xb8>
 8001760:	2008      	movs	r0, #8
 8001762:	f7ff fd39 	bl	80011d8 <MFRC522_ReadRegister>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <MFRC522_AuthState+0xbe>
    {   status = MI_ERR;   }
 8001770:	2302      	movs	r3, #2
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return status;
 8001776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800177a:	4618      	mov	r0, r3
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <MFRC522_AuthState_Out>:

uint8_t MFRC522_AuthState_Out(uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b08c      	sub	sp, #48	; 0x30
 8001786:	af02      	add	r7, sp, #8
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	460b      	mov	r3, r1
 8001792:	73bb      	strb	r3, [r7, #14]
    uint8_t status;
    uint16_t  Length;
    uint8_t i,Buffer[MAXRLEN]; 

    Buffer[0] = auth_mode;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	743b      	strb	r3, [r7, #16]
    Buffer[1] = addr;
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	747b      	strb	r3, [r7, #17]
    for (i=0; i<6; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017a2:	e011      	b.n	80017c8 <MFRC522_AuthState_Out+0x46>
    {    
          Buffer[i+2] = *(pKey+i);   }
 80017a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	441a      	add	r2, r3
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017b0:	3302      	adds	r3, #2
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017b8:	440b      	add	r3, r1
 80017ba:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (i=0; i<6; i++)
 80017be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c2:	3301      	adds	r3, #1
 80017c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d9e9      	bls.n	80017a4 <MFRC522_AuthState_Out+0x22>
    for (i=0; i<4; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017d6:	e011      	b.n	80017fc <MFRC522_AuthState_Out+0x7a>
    {    Buffer[i+8] = *(pSnr+i);   }    
 80017d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	441a      	add	r2, r3
 80017e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017e4:	3308      	adds	r3, #8
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017ec:	440b      	add	r3, r1
 80017ee:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (i=0; i<4; i++)
 80017f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f6:	3301      	adds	r3, #1
 80017f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001800:	2b03      	cmp	r3, #3
 8001802:	d9e9      	bls.n	80017d8 <MFRC522_AuthState_Out+0x56>
    status = MFRC522_ComMF522_Out(MFRC522_AUTHENT,Buffer,12,Buffer,&Length);
 8001804:	f107 0210 	add.w	r2, r7, #16
 8001808:	f107 0110 	add.w	r1, r7, #16
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	220c      	movs	r2, #12
 8001816:	200e      	movs	r0, #14
 8001818:	f000 fb67 	bl	8001eea <MFRC522_ComMF522_Out>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((status != MI_OK) || (!(MFRC522_Out_ReadRegister(STATUS2_REGISTER) & 0x08)))
 8001822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <MFRC522_AuthState_Out+0xb8>
 800182a:	2008      	movs	r0, #8
 800182c:	f7ff fd02 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001830:	4603      	mov	r3, r0
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <MFRC522_AuthState_Out+0xbe>
    {   status = MI_ERR;   }
 800183a:	2302      	movs	r3, #2
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return status;
 8001840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001844:	4618      	mov	r0, r3
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MFRC522_Read>:
                *pData      :    Con tro luu tru du lieu.
Tra Ve      :   OK          :    Doc du lieu thanh cong.
                NOT_OK      :    Doc du lieu that bai.
********************************************************************************/
uint8_t MFRC522_Read(uint8_t addr,uint8_t *pData)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af02      	add	r7, sp, #8
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint16_t  Length;
    uint8_t i,Buffer[MAXRLEN]; 

    Buffer[0] = PICC_READ;
 8001858:	2330      	movs	r3, #48	; 0x30
 800185a:	723b      	strb	r3, [r7, #8]
    Buffer[1] = addr;
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	727b      	strb	r3, [r7, #9]
    CalulateCRC(Buffer,2,&Buffer[2]);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	1c9a      	adds	r2, r3, #2
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2102      	movs	r1, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f94d 	bl	8001b0c <CalulateCRC>
   
    status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,4,Buffer,&Length);
 8001872:	f107 0208 	add.w	r2, r7, #8
 8001876:	f107 0108 	add.w	r1, r7, #8
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	2204      	movs	r2, #4
 8001884:	200c      	movs	r0, #12
 8001886:	f000 fa59 	bl	8001d3c <MFRC522_ComMF522>
 800188a:	4603      	mov	r3, r0
 800188c:	77fb      	strb	r3, [r7, #31]
    if ((status == MI_OK) && (Length == 0x90))
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d116      	bne.n	80018c2 <MFRC522_Read+0x76>
 8001894:	8bbb      	ldrh	r3, [r7, #28]
 8001896:	2b90      	cmp	r3, #144	; 0x90
 8001898:	d113      	bne.n	80018c2 <MFRC522_Read+0x76>
    {
        for (i=0; i<16; i++)
 800189a:	2300      	movs	r3, #0
 800189c:	77bb      	strb	r3, [r7, #30]
 800189e:	e00c      	b.n	80018ba <MFRC522_Read+0x6e>
          *(pData+i) = Buffer[i];   
 80018a0:	7fba      	ldrb	r2, [r7, #30]
 80018a2:	7fbb      	ldrb	r3, [r7, #30]
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	440b      	add	r3, r1
 80018a8:	f107 0120 	add.w	r1, r7, #32
 80018ac:	440a      	add	r2, r1
 80018ae:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80018b2:	701a      	strb	r2, [r3, #0]
        for (i=0; i<16; i++)
 80018b4:	7fbb      	ldrb	r3, [r7, #30]
 80018b6:	3301      	adds	r3, #1
 80018b8:	77bb      	strb	r3, [r7, #30]
 80018ba:	7fbb      	ldrb	r3, [r7, #30]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d9ef      	bls.n	80018a0 <MFRC522_Read+0x54>
    if ((status == MI_OK) && (Length == 0x90))
 80018c0:	e001      	b.n	80018c6 <MFRC522_Read+0x7a>
    }
    else
      status = MI_ERR;   
 80018c2:	2302      	movs	r3, #2
 80018c4:	77fb      	strb	r3, [r7, #31]
    
    return status;
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
}  
 80018c8:	4618      	mov	r0, r3
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MFRC522_Read_Out>:

uint8_t MFRC522_Read_Out(uint8_t addr,uint8_t *pData)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint16_t  Length;
    uint8_t i,Buffer[MAXRLEN]; 

    Buffer[0] = PICC_READ;
 80018dc:	2330      	movs	r3, #48	; 0x30
 80018de:	723b      	strb	r3, [r7, #8]
    Buffer[1] = addr;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	727b      	strb	r3, [r7, #9]
    CalulateCRCOut(Buffer,2,&Buffer[2]);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	1c9a      	adds	r2, r3, #2
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f958 	bl	8001ba6 <CalulateCRCOut>
   
    status = MFRC522_ComMF522_Out(MFRC522_TRANSCEIVE,Buffer,4,Buffer,&Length);
 80018f6:	f107 0208 	add.w	r2, r7, #8
 80018fa:	f107 0108 	add.w	r1, r7, #8
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	2204      	movs	r2, #4
 8001908:	200c      	movs	r0, #12
 800190a:	f000 faee 	bl	8001eea <MFRC522_ComMF522_Out>
 800190e:	4603      	mov	r3, r0
 8001910:	77fb      	strb	r3, [r7, #31]
    if ((status == MI_OK) && (Length == 0x90))
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d116      	bne.n	8001946 <MFRC522_Read_Out+0x76>
 8001918:	8bbb      	ldrh	r3, [r7, #28]
 800191a:	2b90      	cmp	r3, #144	; 0x90
 800191c:	d113      	bne.n	8001946 <MFRC522_Read_Out+0x76>
    {
        for (i=0; i<16; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	77bb      	strb	r3, [r7, #30]
 8001922:	e00c      	b.n	800193e <MFRC522_Read_Out+0x6e>
          *(pData+i) = Buffer[i];   
 8001924:	7fba      	ldrb	r2, [r7, #30]
 8001926:	7fbb      	ldrb	r3, [r7, #30]
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	440b      	add	r3, r1
 800192c:	f107 0120 	add.w	r1, r7, #32
 8001930:	440a      	add	r2, r1
 8001932:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001936:	701a      	strb	r2, [r3, #0]
        for (i=0; i<16; i++)
 8001938:	7fbb      	ldrb	r3, [r7, #30]
 800193a:	3301      	adds	r3, #1
 800193c:	77bb      	strb	r3, [r7, #30]
 800193e:	7fbb      	ldrb	r3, [r7, #30]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d9ef      	bls.n	8001924 <MFRC522_Read_Out+0x54>
    if ((status == MI_OK) && (Length == 0x90))
 8001944:	e001      	b.n	800194a <MFRC522_Read_Out+0x7a>
    }
    else
      status = MI_ERR;   
 8001946:	2302      	movs	r3, #2
 8001948:	77fb      	strb	r3, [r7, #31]
    
    return status;
 800194a:	7ffb      	ldrb	r3, [r7, #31]
}  
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <MFRC522_Write>:
                *pData      :    Con tro luu tru du lieu.
Tra Ve      :   OK          :    Ghi du lieu thanh cong.
                NOT_OK      :    Ghi du lieu that bai.
********************************************************************************/
uint8_t MFRC522_Write(uint8_t addr,uint8_t *pData)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af02      	add	r7, sp, #8
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint16_t  Length;
    uint8_t i,Buffer[MAXRLEN]; 
    
    Buffer[0] = PICC_WRITE;
 8001960:	23a0      	movs	r3, #160	; 0xa0
 8001962:	723b      	strb	r3, [r7, #8]
    Buffer[1] = addr;
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	727b      	strb	r3, [r7, #9]
    CalulateCRC(Buffer,2,&Buffer[2]);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	1c9a      	adds	r2, r3, #2
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	2102      	movs	r1, #2
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f8c9 	bl	8001b0c <CalulateCRC>
 
    status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,4,Buffer,&Length);
 800197a:	f107 0208 	add.w	r2, r7, #8
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	2204      	movs	r2, #4
 800198c:	200c      	movs	r0, #12
 800198e:	f000 f9d5 	bl	8001d3c <MFRC522_ComMF522>
 8001992:	4603      	mov	r3, r0
 8001994:	77fb      	strb	r3, [r7, #31]

    if ((status != MI_OK) || (Length != 4) || ((Buffer[0] & 0x0F) != 0x0A))
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <MFRC522_Write+0x58>
 800199c:	8bbb      	ldrh	r3, [r7, #28]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d104      	bne.n	80019ac <MFRC522_Write+0x58>
 80019a2:	7a3b      	ldrb	r3, [r7, #8]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	2b0a      	cmp	r3, #10
 80019aa:	d001      	beq.n	80019b0 <MFRC522_Write+0x5c>
    {   status = MI_ERR;   }
 80019ac:	2302      	movs	r3, #2
 80019ae:	77fb      	strb	r3, [r7, #31]
        
    if (status == MI_OK)
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d137      	bne.n	8001a26 <MFRC522_Write+0xd2>
    {
        for (i=0; i<16; i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	77bb      	strb	r3, [r7, #30]
 80019ba:	e00c      	b.n	80019d6 <MFRC522_Write+0x82>
        {    Buffer[i] = *(pData+i);   }
 80019bc:	7fbb      	ldrb	r3, [r7, #30]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	441a      	add	r2, r3
 80019c2:	7fbb      	ldrb	r3, [r7, #30]
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	f107 0120 	add.w	r1, r7, #32
 80019ca:	440b      	add	r3, r1
 80019cc:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (i=0; i<16; i++)
 80019d0:	7fbb      	ldrb	r3, [r7, #30]
 80019d2:	3301      	adds	r3, #1
 80019d4:	77bb      	strb	r3, [r7, #30]
 80019d6:	7fbb      	ldrb	r3, [r7, #30]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d9ef      	bls.n	80019bc <MFRC522_Write+0x68>
        CalulateCRC(Buffer,16,&Buffer[16]);
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	f103 0210 	add.w	r2, r3, #16
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	2110      	movs	r1, #16
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f88e 	bl	8001b0c <CalulateCRC>

        status = MFRC522_ComMF522(MFRC522_TRANSCEIVE,Buffer,18,Buffer,&Length);
 80019f0:	f107 0208 	add.w	r2, r7, #8
 80019f4:	f107 0108 	add.w	r1, r7, #8
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	2212      	movs	r2, #18
 8001a02:	200c      	movs	r0, #12
 8001a04:	f000 f99a 	bl	8001d3c <MFRC522_ComMF522>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	77fb      	strb	r3, [r7, #31]
        if ((status != MI_OK) || (Length != 4) || ((Buffer[0] & 0x0F) != 0x0A))
 8001a0c:	7ffb      	ldrb	r3, [r7, #31]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <MFRC522_Write+0xce>
 8001a12:	8bbb      	ldrh	r3, [r7, #28]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d104      	bne.n	8001a22 <MFRC522_Write+0xce>
 8001a18:	7a3b      	ldrb	r3, [r7, #8]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	2b0a      	cmp	r3, #10
 8001a20:	d001      	beq.n	8001a26 <MFRC522_Write+0xd2>
        {   status = MI_ERR;   }
 8001a22:	2302      	movs	r3, #2
 8001a24:	77fb      	strb	r3, [r7, #31]
    }
    
    return status;
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
} 
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <MFRC522_Write_Out>:

uint8_t MFRC522_Write_Out(uint8_t addr,uint8_t *pData)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint16_t  Length;
    uint8_t i,Buffer[MAXRLEN]; 
    
    Buffer[0] = PICC_WRITE;
 8001a3c:	23a0      	movs	r3, #160	; 0xa0
 8001a3e:	723b      	strb	r3, [r7, #8]
    Buffer[1] = addr;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	727b      	strb	r3, [r7, #9]
    CalulateCRCOut(Buffer,2,&Buffer[2]);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	1c9a      	adds	r2, r3, #2
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f8a8 	bl	8001ba6 <CalulateCRCOut>
 
    status = MFRC522_ComMF522_Out(MFRC522_TRANSCEIVE,Buffer,4,Buffer,&Length);
 8001a56:	f107 0208 	add.w	r2, r7, #8
 8001a5a:	f107 0108 	add.w	r1, r7, #8
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	2204      	movs	r2, #4
 8001a68:	200c      	movs	r0, #12
 8001a6a:	f000 fa3e 	bl	8001eea <MFRC522_ComMF522_Out>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	77fb      	strb	r3, [r7, #31]

    if ((status != MI_OK) || (Length != 4) || ((Buffer[0] & 0x0F) != 0x0A))
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <MFRC522_Write_Out+0x58>
 8001a78:	8bbb      	ldrh	r3, [r7, #28]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d104      	bne.n	8001a88 <MFRC522_Write_Out+0x58>
 8001a7e:	7a3b      	ldrb	r3, [r7, #8]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	2b0a      	cmp	r3, #10
 8001a86:	d001      	beq.n	8001a8c <MFRC522_Write_Out+0x5c>
    {   status = MI_ERR;   }
 8001a88:	2302      	movs	r3, #2
 8001a8a:	77fb      	strb	r3, [r7, #31]
        
    if (status == MI_OK)
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d137      	bne.n	8001b02 <MFRC522_Write_Out+0xd2>
    {
        for (i=0; i<16; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	77bb      	strb	r3, [r7, #30]
 8001a96:	e00c      	b.n	8001ab2 <MFRC522_Write_Out+0x82>
        {    Buffer[i] = *(pData+i);   }
 8001a98:	7fbb      	ldrb	r3, [r7, #30]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	7fbb      	ldrb	r3, [r7, #30]
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	f107 0120 	add.w	r1, r7, #32
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (i=0; i<16; i++)
 8001aac:	7fbb      	ldrb	r3, [r7, #30]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	77bb      	strb	r3, [r7, #30]
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d9ef      	bls.n	8001a98 <MFRC522_Write_Out+0x68>
        CalulateCRCOut(Buffer,16,&Buffer[16]);
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	f103 0210 	add.w	r2, r3, #16
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f86d 	bl	8001ba6 <CalulateCRCOut>

        status = MFRC522_ComMF522_Out(MFRC522_TRANSCEIVE,Buffer,18,Buffer,&Length);
 8001acc:	f107 0208 	add.w	r2, r7, #8
 8001ad0:	f107 0108 	add.w	r1, r7, #8
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	2212      	movs	r2, #18
 8001ade:	200c      	movs	r0, #12
 8001ae0:	f000 fa03 	bl	8001eea <MFRC522_ComMF522_Out>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	77fb      	strb	r3, [r7, #31]
        if ((status != MI_OK) || (Length != 4) || ((Buffer[0] & 0x0F) != 0x0A))
 8001ae8:	7ffb      	ldrb	r3, [r7, #31]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d107      	bne.n	8001afe <MFRC522_Write_Out+0xce>
 8001aee:	8bbb      	ldrh	r3, [r7, #28]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d104      	bne.n	8001afe <MFRC522_Write_Out+0xce>
 8001af4:	7a3b      	ldrb	r3, [r7, #8]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	2b0a      	cmp	r3, #10
 8001afc:	d001      	beq.n	8001b02 <MFRC522_Write_Out+0xd2>
        {   status = MI_ERR;   }
 8001afe:	2302      	movs	r3, #2
 8001b00:	77fb      	strb	r3, [r7, #31]
    }
    
    return status;
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
} 
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <CalulateCRC>:
    return MI_OK;
}
/*******************************************************************************
********************************************************************************/
void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	460b      	mov	r3, r1
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	72fb      	strb	r3, [r7, #11]
  uint8_t i,n;

  ClearBitMask(DIV_IRQ_REGISTER,0x04);
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	2005      	movs	r0, #5
 8001b1e:	f000 f8c9 	bl	8001cb4 <ClearBitMask>
  MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 8001b22:	2100      	movs	r1, #0
 8001b24:	2001      	movs	r0, #1
 8001b26:	f7ff fbb3 	bl	8001290 <MFRC522_WriteRegister>
  SetBitMask(FIFO_LEVEL_REGISTER,0x80);
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 f887 	bl	8001c40 <SetBitMask>

  for (i=0; i<len; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
 8001b36:	e00a      	b.n	8001b4e <CalulateCRC+0x42>
    MFRC522_WriteRegister(FIFO_DATA_REGISTER, *(pIndata+i));   
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	2009      	movs	r0, #9
 8001b44:	f7ff fba4 	bl	8001290 <MFRC522_WriteRegister>
  for (i=0; i<len; i++)
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
 8001b4e:	7dfa      	ldrb	r2, [r7, #23]
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3f0      	bcc.n	8001b38 <CalulateCRC+0x2c>

  MFRC522_WriteRegister(COMMAND_REGISTER, MFRC522_CALCCRC);
 8001b56:	2103      	movs	r1, #3
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff fb99 	bl	8001290 <MFRC522_WriteRegister>
  i = 0xFF;
 8001b5e:	23ff      	movs	r3, #255	; 0xff
 8001b60:	75fb      	strb	r3, [r7, #23]

  do 
  {
    n = MFRC522_ReadRegister(DIV_IRQ_REGISTER);
 8001b62:	2005      	movs	r0, #5
 8001b64:	f7ff fb38 	bl	80011d8 <MFRC522_ReadRegister>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	75bb      	strb	r3, [r7, #22]
    i--;
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
  }
  while ((i!=0) && !(n&0x04));
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <CalulateCRC+0x76>
 8001b78:	7dbb      	ldrb	r3, [r7, #22]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ef      	beq.n	8001b62 <CalulateCRC+0x56>

  pOutData[0] = MFRC522_ReadRegister(CRC_RESULT_L_REGISTER);
 8001b82:	2022      	movs	r0, #34	; 0x22
 8001b84:	f7ff fb28 	bl	80011d8 <MFRC522_ReadRegister>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	701a      	strb	r2, [r3, #0]
  pOutData[1] = MFRC522_ReadRegister(CRC_RESULT_M_REGISTER);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1c5c      	adds	r4, r3, #1
 8001b94:	2021      	movs	r0, #33	; 0x21
 8001b96:	f7ff fb1f 	bl	80011d8 <MFRC522_ReadRegister>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	7023      	strb	r3, [r4, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}

08001ba6 <CalulateCRCOut>:

void CalulateCRCOut(uint8_t *pIndata,uint8_t len,uint8_t *pOutData)
{
 8001ba6:	b590      	push	{r4, r7, lr}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	72fb      	strb	r3, [r7, #11]
  uint8_t i,n;

  ClearBitMaskOut(DIV_IRQ_REGISTER,0x04);
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f000 f89e 	bl	8001cf8 <ClearBitMaskOut>
  MFRC522_Out_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff fb92 	bl	80012e8 <MFRC522_Out_WriteRegister>
  SetBitMaskOut(FIFO_LEVEL_REGISTER,0x80);
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	200a      	movs	r0, #10
 8001bc8:	f000 f857 	bl	8001c7a <SetBitMaskOut>

  for (i=0; i<len; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
 8001bd0:	e00a      	b.n	8001be8 <CalulateCRCOut+0x42>
    MFRC522_Out_WriteRegister(FIFO_DATA_REGISTER, *(pIndata+i));  
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	2009      	movs	r0, #9
 8001bde:	f7ff fb83 	bl	80012e8 <MFRC522_Out_WriteRegister>
  for (i=0; i<len; i++)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	3301      	adds	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
 8001be8:	7dfa      	ldrb	r2, [r7, #23]
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d3f0      	bcc.n	8001bd2 <CalulateCRCOut+0x2c>

  MFRC522_Out_WriteRegister(COMMAND_REGISTER, MFRC522_CALCCRC);
 8001bf0:	2103      	movs	r1, #3
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fb78 	bl	80012e8 <MFRC522_Out_WriteRegister>
  i = 0xFF;
 8001bf8:	23ff      	movs	r3, #255	; 0xff
 8001bfa:	75fb      	strb	r3, [r7, #23]

  do 
  {
    n = MFRC522_Out_ReadRegister(DIV_IRQ_REGISTER);
 8001bfc:	2005      	movs	r0, #5
 8001bfe:	f7ff fb19 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001c02:	4603      	mov	r3, r0
 8001c04:	75bb      	strb	r3, [r7, #22]
    i--;
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	75fb      	strb	r3, [r7, #23]
  }
  while ((i!=0) && !(n&0x04));
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <CalulateCRCOut+0x76>
 8001c12:	7dbb      	ldrb	r3, [r7, #22]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <CalulateCRCOut+0x56>

  pOutData[0] = MFRC522_Out_ReadRegister(CRC_RESULT_L_REGISTER);
 8001c1c:	2022      	movs	r0, #34	; 0x22
 8001c1e:	f7ff fb09 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	701a      	strb	r2, [r3, #0]
  pOutData[1] = MFRC522_Out_ReadRegister(CRC_RESULT_M_REGISTER);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	1c5c      	adds	r4, r3, #1
 8001c2e:	2021      	movs	r0, #33	; 0x21
 8001c30:	f7ff fb00 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001c34:	4603      	mov	r3, r0
 8001c36:	7023      	strb	r3, [r4, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <SetBitMask>:
/*******************************************************************************
********************************************************************************/
void SetBitMask(uint8_t reg,uint8_t mask)  
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  tmp = MFRC522_ReadRegister(reg);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fabe 	bl	80011d8 <MFRC522_ReadRegister>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  MFRC522_WriteRegister(reg,tmp | mask);  // set bit mask
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fb0f 	bl	8001290 <MFRC522_WriteRegister>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <SetBitMaskOut>:

void SetBitMaskOut(uint8_t reg,uint8_t mask)  
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	460a      	mov	r2, r1
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	4613      	mov	r3, r2
 8001c88:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  tmp = MFRC522_Out_ReadRegister(reg);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff facf 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
  MFRC522_Out_WriteRegister(reg,tmp | mask);  // set bit mask
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fb1e 	bl	80012e8 <MFRC522_Out_WriteRegister>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <ClearBitMask>:

*/
/*******************************************************************************
********************************************************************************/
void ClearBitMask(uint8_t reg,uint8_t mask)  
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  tmp = MFRC522_ReadRegister(reg);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa84 	bl	80011d8 <MFRC522_ReadRegister>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  MFRC522_WriteRegister(reg, tmp & (~mask));  // clear bit mask
 8001cd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fad0 	bl	8001290 <MFRC522_WriteRegister>
} 
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <ClearBitMaskOut>:

void ClearBitMaskOut(uint8_t reg,uint8_t mask)  
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  tmp = MFRC522_Out_ReadRegister(reg);
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa90 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
  MFRC522_Out_WriteRegister(reg, tmp & (~mask));  // clear bit mask
 8001d18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	b25a      	sxtb	r2, r3
 8001d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d24:	4013      	ands	r3, r2
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fada 	bl	80012e8 <MFRC522_Out_WriteRegister>
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <MFRC522_ComMF522>:
/*******************************************************************************
********************************************************************************/
//to card
uint8_t MFRC522_ComMF522(uint8_t  Command, uint8_t  *pInData, uint8_t  InLenByte, uint8_t  *pOutData, uint16_t *pOutLenBit)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn   = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75bb      	strb	r3, [r7, #22]
    uint8_t waitFor = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (Command)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d006      	beq.n	8001d6e <MFRC522_ComMF522+0x32>
 8001d60:	2b0e      	cmp	r3, #14
 8001d62:	d109      	bne.n	8001d78 <MFRC522_ComMF522+0x3c>
    {
      case MFRC522_AUTHENT:
        irqEn   = 0x12;
 8001d64:	2312      	movs	r3, #18
 8001d66:	75bb      	strb	r3, [r7, #22]
        waitFor = 0x10;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	757b      	strb	r3, [r7, #21]
        break;
 8001d6c:	e005      	b.n	8001d7a <MFRC522_ComMF522+0x3e>
      case MFRC522_TRANSCEIVE:
        irqEn   = 0x77;
 8001d6e:	2377      	movs	r3, #119	; 0x77
 8001d70:	75bb      	strb	r3, [r7, #22]
        waitFor = 0x30;
 8001d72:	2330      	movs	r3, #48	; 0x30
 8001d74:	757b      	strb	r3, [r7, #21]
        break;
 8001d76:	e000      	b.n	8001d7a <MFRC522_ComMF522+0x3e>
      default:
        break;
 8001d78:	bf00      	nop
    }
   
    MFRC522_WriteRegister(IE_REGISTER,irqEn|0x80);
 8001d7a:	7dbb      	ldrb	r3, [r7, #22]
 8001d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff fa83 	bl	8001290 <MFRC522_WriteRegister>
    ClearBitMask(IRQ_REGISTER,0x80);
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	2004      	movs	r0, #4
 8001d8e:	f7ff ff91 	bl	8001cb4 <ClearBitMask>
    MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff fa7b 	bl	8001290 <MFRC522_WriteRegister>
    SetBitMask(FIFO_LEVEL_REGISTER,0x80);
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	200a      	movs	r0, #10
 8001d9e:	f7ff ff4f 	bl	8001c40 <SetBitMask>
    
    for (i=0; i<InLenByte; i++) 
 8001da2:	2300      	movs	r3, #0
 8001da4:	827b      	strh	r3, [r7, #18]
 8001da6:	e00a      	b.n	8001dbe <MFRC522_ComMF522+0x82>
      MFRC522_WriteRegister(FIFO_DATA_REGISTER, pInData[i]);
 8001da8:	8a7b      	ldrh	r3, [r7, #18]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	2009      	movs	r0, #9
 8001db4:	f7ff fa6c 	bl	8001290 <MFRC522_WriteRegister>
    for (i=0; i<InLenByte; i++) 
 8001db8:	8a7b      	ldrh	r3, [r7, #18]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	827b      	strh	r3, [r7, #18]
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	8a7a      	ldrh	r2, [r7, #18]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3ef      	bcc.n	8001da8 <MFRC522_ComMF522+0x6c>
    
    MFRC522_WriteRegister(COMMAND_REGISTER, Command);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fa5f 	bl	8001290 <MFRC522_WriteRegister>
    if (Command == MFRC522_TRANSCEIVE)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d103      	bne.n	8001de0 <MFRC522_ComMF522+0xa4>
      SetBitMask(BIT_FRAMING_REGISTER,0x80);  
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	200d      	movs	r0, #13
 8001ddc:	f7ff ff30 	bl	8001c40 <SetBitMask>
    
    i = 600;//25ms
 8001de0:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001de4:	827b      	strh	r3, [r7, #18]
    do 
    {
      n = MFRC522_ReadRegister(IRQ_REGISTER);
 8001de6:	2004      	movs	r0, #4
 8001de8:	f7ff f9f6 	bl	80011d8 <MFRC522_ReadRegister>
 8001dec:	4603      	mov	r3, r0
 8001dee:	753b      	strb	r3, [r7, #20]
      i--;
 8001df0:	8a7b      	ldrh	r3, [r7, #18]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	827b      	strh	r3, [r7, #18]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitFor));
 8001df6:	8a7b      	ldrh	r3, [r7, #18]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <MFRC522_ComMF522+0xd6>
 8001dfc:	7d3b      	ldrb	r3, [r7, #20]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <MFRC522_ComMF522+0xd6>
 8001e06:	7d3a      	ldrb	r2, [r7, #20]
 8001e08:	7d7b      	ldrb	r3, [r7, #21]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0e9      	beq.n	8001de6 <MFRC522_ComMF522+0xaa>

    ClearBitMask(BIT_FRAMING_REGISTER,0x80);
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	200d      	movs	r0, #13
 8001e16:	f7ff ff4d 	bl	8001cb4 <ClearBitMask>
         
    if (i!=0)
 8001e1a:	8a7b      	ldrh	r3, [r7, #18]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d057      	beq.n	8001ed0 <MFRC522_ComMF522+0x194>
    {    
      if(!(MFRC522_ReadRegister(ERROR_REGISTER)&0x1B))
 8001e20:	2006      	movs	r0, #6
 8001e22:	f7ff f9d9 	bl	80011d8 <MFRC522_ReadRegister>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f003 031b 	and.w	r3, r3, #27
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d14d      	bne.n	8001ecc <MFRC522_ComMF522+0x190>
      {
        status = MI_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]
        if (n & irqEn & 0x01)
 8001e34:	7d3a      	ldrb	r2, [r7, #20]
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MFRC522_ComMF522+0x10c>
          status = MI_NOTAGERR;   
 8001e44:	2301      	movs	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]

        if (Command == MFRC522_TRANSCEIVE)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d140      	bne.n	8001ed0 <MFRC522_ComMF522+0x194>
        {
          n = MFRC522_ReadRegister(FIFO_LEVEL_REGISTER);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f7ff f9c2 	bl	80011d8 <MFRC522_ReadRegister>
 8001e54:	4603      	mov	r3, r0
 8001e56:	753b      	strb	r3, [r7, #20]
          lastBits = MFRC522_ReadRegister(CONTROL_REGISTER) & 0x07;
 8001e58:	200c      	movs	r0, #12
 8001e5a:	f7ff f9bd 	bl	80011d8 <MFRC522_ReadRegister>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	747b      	strb	r3, [r7, #17]
          if (lastBits)  
 8001e66:	7c7b      	ldrb	r3, [r7, #17]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <MFRC522_ComMF522+0x148>
            *pOutLenBit = (n-1)*8 + lastBits;  
 8001e6c:	7d3b      	ldrb	r3, [r7, #20]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	7c7b      	ldrb	r3, [r7, #17]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	e005      	b.n	8001e90 <MFRC522_ComMF522+0x154>
 
          else
            *pOutLenBit = n*8;  
 8001e84:	7d3b      	ldrb	r3, [r7, #20]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	801a      	strh	r2, [r3, #0]

          if (n == 0)       n = 1;    
 8001e90:	7d3b      	ldrb	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <MFRC522_ComMF522+0x15e>
 8001e96:	2301      	movs	r3, #1
 8001e98:	753b      	strb	r3, [r7, #20]
          if (n > MAXRLEN)  n = MAXRLEN;   
 8001e9a:	7d3b      	ldrb	r3, [r7, #20]
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d901      	bls.n	8001ea4 <MFRC522_ComMF522+0x168>
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	753b      	strb	r3, [r7, #20]
          for (i=0; i<n; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	827b      	strh	r3, [r7, #18]
 8001ea8:	e00a      	b.n	8001ec0 <MFRC522_ComMF522+0x184>
            pOutData[i] = MFRC522_ReadRegister(FIFO_DATA_REGISTER);    
 8001eaa:	8a7b      	ldrh	r3, [r7, #18]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	18d4      	adds	r4, r2, r3
 8001eb0:	2009      	movs	r0, #9
 8001eb2:	f7ff f991 	bl	80011d8 <MFRC522_ReadRegister>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	7023      	strb	r3, [r4, #0]
          for (i=0; i<n; i++)
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	827b      	strh	r3, [r7, #18]
 8001ec0:	7d3b      	ldrb	r3, [r7, #20]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	8a7a      	ldrh	r2, [r7, #18]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3ef      	bcc.n	8001eaa <MFRC522_ComMF522+0x16e>
 8001eca:	e001      	b.n	8001ed0 <MFRC522_ComMF522+0x194>

        }
      }
      else 
        status = MI_ERR;      
 8001ecc:	2302      	movs	r3, #2
 8001ece:	75fb      	strb	r3, [r7, #23]
    }
    SetBitMask(CONTROL_REGISTER,0x80);                    // stop timer now
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	200c      	movs	r0, #12
 8001ed4:	f7ff feb4 	bl	8001c40 <SetBitMask>
    MFRC522_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE); 
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff f9d8 	bl	8001290 <MFRC522_WriteRegister>
    return status;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}

08001eea <MFRC522_ComMF522_Out>:

uint8_t MFRC522_ComMF522_Out(uint8_t  Command, uint8_t  *pInData, uint8_t  InLenByte, uint8_t  *pOutData, uint16_t *pOutLenBit)
{
 8001eea:	b590      	push	{r4, r7, lr}
 8001eec:	b087      	sub	sp, #28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8001efc:	2302      	movs	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn   = 0x00;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75bb      	strb	r3, [r7, #22]
    uint8_t waitFor = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (Command)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d006      	beq.n	8001f1c <MFRC522_ComMF522_Out+0x32>
 8001f0e:	2b0e      	cmp	r3, #14
 8001f10:	d109      	bne.n	8001f26 <MFRC522_ComMF522_Out+0x3c>
    {
      case MFRC522_AUTHENT:
        irqEn   = 0x12;
 8001f12:	2312      	movs	r3, #18
 8001f14:	75bb      	strb	r3, [r7, #22]
        waitFor = 0x10;
 8001f16:	2310      	movs	r3, #16
 8001f18:	757b      	strb	r3, [r7, #21]
        break;
 8001f1a:	e005      	b.n	8001f28 <MFRC522_ComMF522_Out+0x3e>
      case MFRC522_TRANSCEIVE:
        irqEn   = 0x77;
 8001f1c:	2377      	movs	r3, #119	; 0x77
 8001f1e:	75bb      	strb	r3, [r7, #22]
        waitFor = 0x30;
 8001f20:	2330      	movs	r3, #48	; 0x30
 8001f22:	757b      	strb	r3, [r7, #21]
        break;
 8001f24:	e000      	b.n	8001f28 <MFRC522_ComMF522_Out+0x3e>
      default:
        break;
 8001f26:	bf00      	nop
    }
   
    MFRC522_Out_WriteRegister(IE_REGISTER,irqEn|0x80);
 8001f28:	7dbb      	ldrb	r3, [r7, #22]
 8001f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7ff f9d8 	bl	80012e8 <MFRC522_Out_WriteRegister>
    ClearBitMaskOut(IRQ_REGISTER,0x80);
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	2004      	movs	r0, #4
 8001f3c:	f7ff fedc 	bl	8001cf8 <ClearBitMaskOut>
    MFRC522_Out_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE);
 8001f40:	2100      	movs	r1, #0
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff f9d0 	bl	80012e8 <MFRC522_Out_WriteRegister>
    SetBitMaskOut(FIFO_LEVEL_REGISTER,0x80);
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	200a      	movs	r0, #10
 8001f4c:	f7ff fe95 	bl	8001c7a <SetBitMaskOut>
    
    for (i=0; i<InLenByte; i++) 
 8001f50:	2300      	movs	r3, #0
 8001f52:	827b      	strh	r3, [r7, #18]
 8001f54:	e00a      	b.n	8001f6c <MFRC522_ComMF522_Out+0x82>
      MFRC522_Out_WriteRegister(FIFO_DATA_REGISTER, pInData[i]);
 8001f56:	8a7b      	ldrh	r3, [r7, #18]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	2009      	movs	r0, #9
 8001f62:	f7ff f9c1 	bl	80012e8 <MFRC522_Out_WriteRegister>
    for (i=0; i<InLenByte; i++) 
 8001f66:	8a7b      	ldrh	r3, [r7, #18]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	827b      	strh	r3, [r7, #18]
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	8a7a      	ldrh	r2, [r7, #18]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3ef      	bcc.n	8001f56 <MFRC522_ComMF522_Out+0x6c>
    
    MFRC522_Out_WriteRegister(COMMAND_REGISTER, Command);
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff f9b4 	bl	80012e8 <MFRC522_Out_WriteRegister>
    if (Command == MFRC522_TRANSCEIVE)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d103      	bne.n	8001f8e <MFRC522_ComMF522_Out+0xa4>
      SetBitMaskOut(BIT_FRAMING_REGISTER,0x80);  
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	200d      	movs	r0, #13
 8001f8a:	f7ff fe76 	bl	8001c7a <SetBitMaskOut>
    
    i = 600;//25ms
 8001f8e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001f92:	827b      	strh	r3, [r7, #18]
    do 
    {
      n = MFRC522_Out_ReadRegister(IRQ_REGISTER);
 8001f94:	2004      	movs	r0, #4
 8001f96:	f7ff f94d 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	753b      	strb	r3, [r7, #20]
      i--;
 8001f9e:	8a7b      	ldrh	r3, [r7, #18]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	827b      	strh	r3, [r7, #18]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitFor));
 8001fa4:	8a7b      	ldrh	r3, [r7, #18]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <MFRC522_ComMF522_Out+0xd6>
 8001faa:	7d3b      	ldrb	r3, [r7, #20]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <MFRC522_ComMF522_Out+0xd6>
 8001fb4:	7d3a      	ldrb	r2, [r7, #20]
 8001fb6:	7d7b      	ldrb	r3, [r7, #21]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0e9      	beq.n	8001f94 <MFRC522_ComMF522_Out+0xaa>

    ClearBitMaskOut(BIT_FRAMING_REGISTER,0x80);
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	200d      	movs	r0, #13
 8001fc4:	f7ff fe98 	bl	8001cf8 <ClearBitMaskOut>
         
    if (i!=0)
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d057      	beq.n	800207e <MFRC522_ComMF522_Out+0x194>
    {    
      if(!(MFRC522_Out_ReadRegister(ERROR_REGISTER)&0x1B))
 8001fce:	2006      	movs	r0, #6
 8001fd0:	f7ff f930 	bl	8001234 <MFRC522_Out_ReadRegister>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 031b 	and.w	r3, r3, #27
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d14d      	bne.n	800207a <MFRC522_ComMF522_Out+0x190>
      {
        status = MI_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
        if (n & irqEn & 0x01)
 8001fe2:	7d3a      	ldrb	r2, [r7, #20]
 8001fe4:	7dbb      	ldrb	r3, [r7, #22]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MFRC522_ComMF522_Out+0x10c>
          status = MI_NOTAGERR;   
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]

        if (Command == MFRC522_TRANSCEIVE)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d140      	bne.n	800207e <MFRC522_ComMF522_Out+0x194>
        {
          n = MFRC522_Out_ReadRegister(FIFO_LEVEL_REGISTER);
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	f7ff f919 	bl	8001234 <MFRC522_Out_ReadRegister>
 8002002:	4603      	mov	r3, r0
 8002004:	753b      	strb	r3, [r7, #20]
          lastBits = MFRC522_Out_ReadRegister(CONTROL_REGISTER) & 0x07;
 8002006:	200c      	movs	r0, #12
 8002008:	f7ff f914 	bl	8001234 <MFRC522_Out_ReadRegister>
 800200c:	4603      	mov	r3, r0
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	747b      	strb	r3, [r7, #17]
          if (lastBits)  
 8002014:	7c7b      	ldrb	r3, [r7, #17]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <MFRC522_ComMF522_Out+0x148>
            *pOutLenBit = (n-1)*8 + lastBits;  
 800201a:	7d3b      	ldrb	r3, [r7, #20]
 800201c:	3b01      	subs	r3, #1
 800201e:	b29b      	uxth	r3, r3
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	b29a      	uxth	r2, r3
 8002024:	7c7b      	ldrb	r3, [r7, #17]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4413      	add	r3, r2
 800202a:	b29a      	uxth	r2, r3
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	e005      	b.n	800203e <MFRC522_ComMF522_Out+0x154>
 
          else
            *pOutLenBit = n*8;  
 8002032:	7d3b      	ldrb	r3, [r7, #20]
 8002034:	b29b      	uxth	r3, r3
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	b29a      	uxth	r2, r3
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	801a      	strh	r2, [r3, #0]

          if (n == 0)       n = 1;    
 800203e:	7d3b      	ldrb	r3, [r7, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <MFRC522_ComMF522_Out+0x15e>
 8002044:	2301      	movs	r3, #1
 8002046:	753b      	strb	r3, [r7, #20]
          if (n > MAXRLEN)  n = MAXRLEN;   
 8002048:	7d3b      	ldrb	r3, [r7, #20]
 800204a:	2b12      	cmp	r3, #18
 800204c:	d901      	bls.n	8002052 <MFRC522_ComMF522_Out+0x168>
 800204e:	2312      	movs	r3, #18
 8002050:	753b      	strb	r3, [r7, #20]
          for (i=0; i<n; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	827b      	strh	r3, [r7, #18]
 8002056:	e00a      	b.n	800206e <MFRC522_ComMF522_Out+0x184>
            pOutData[i] = MFRC522_Out_ReadRegister(FIFO_DATA_REGISTER);    
 8002058:	8a7b      	ldrh	r3, [r7, #18]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	18d4      	adds	r4, r2, r3
 800205e:	2009      	movs	r0, #9
 8002060:	f7ff f8e8 	bl	8001234 <MFRC522_Out_ReadRegister>
 8002064:	4603      	mov	r3, r0
 8002066:	7023      	strb	r3, [r4, #0]
          for (i=0; i<n; i++)
 8002068:	8a7b      	ldrh	r3, [r7, #18]
 800206a:	3301      	adds	r3, #1
 800206c:	827b      	strh	r3, [r7, #18]
 800206e:	7d3b      	ldrb	r3, [r7, #20]
 8002070:	b29b      	uxth	r3, r3
 8002072:	8a7a      	ldrh	r2, [r7, #18]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3ef      	bcc.n	8002058 <MFRC522_ComMF522_Out+0x16e>
 8002078:	e001      	b.n	800207e <MFRC522_ComMF522_Out+0x194>

        }
      }
      else 
        status = MI_ERR;      
 800207a:	2302      	movs	r3, #2
 800207c:	75fb      	strb	r3, [r7, #23]
    }
    SetBitMaskOut(CONTROL_REGISTER,0x80);                    // stop timer now
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	200c      	movs	r0, #12
 8002082:	f7ff fdfa 	bl	8001c7a <SetBitMaskOut>
    MFRC522_Out_WriteRegister(COMMAND_REGISTER,MFRC522_IDLE); 
 8002086:	2100      	movs	r1, #0
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff f92d 	bl	80012e8 <MFRC522_Out_WriteRegister>
    return status;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd90      	pop	{r4, r7, pc}

08002098 <MFRC522_AntennaOn>:
/*******************************************************************************
********************************************************************************/
void MFRC522_AntennaOn()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
    uint8_t i;
    i = MFRC522_ReadRegister(TX_CONTROL_REGISTER);
 800209e:	2014      	movs	r0, #20
 80020a0:	f7ff f89a 	bl	80011d8 <MFRC522_ReadRegister>
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
    if (!(i & 0x03))
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d103      	bne.n	80020ba <MFRC522_AntennaOn+0x22>
      SetBitMask(TX_CONTROL_REGISTER, 0x03);
 80020b2:	2103      	movs	r1, #3
 80020b4:	2014      	movs	r0, #20
 80020b6:	f7ff fdc3 	bl	8001c40 <SetBitMask>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <MFRC522_Out_AntennaOn>:

void MFRC522_Out_AntennaOn()
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
    uint8_t i;
    i = MFRC522_Out_ReadRegister(TX_CONTROL_REGISTER);
 80020c8:	2014      	movs	r0, #20
 80020ca:	f7ff f8b3 	bl	8001234 <MFRC522_Out_ReadRegister>
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
    if (!(i & 0x03))
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <MFRC522_Out_AntennaOn+0x22>
      SetBitMaskOut(TX_CONTROL_REGISTER, 0x03);
 80020dc:	2103      	movs	r1, #3
 80020de:	2014      	movs	r0, #20
 80020e0:	f7ff fdcb 	bl	8001c7a <SetBitMaskOut>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002100:	2300      	movs	r3, #0
 8002102:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <MX_RTC_Init+0xac>)
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <MX_RTC_Init+0xb0>)
 8002108:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <MX_RTC_Init+0xac>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <MX_RTC_Init+0xac>)
 8002112:	227f      	movs	r2, #127	; 0x7f
 8002114:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <MX_RTC_Init+0xac>)
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <MX_RTC_Init+0xac>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_RTC_Init+0xac>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_RTC_Init+0xac>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800212e:	481a      	ldr	r0, [pc, #104]	; (8002198 <MX_RTC_Init+0xac>)
 8002130:	f002 f83a 	bl	80041a8 <HAL_RTC_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800213a:	f7fe ffa3 	bl	8001084 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	480f      	ldr	r0, [pc, #60]	; (8002198 <MX_RTC_Init+0xac>)
 800215a:	f002 f8b6 	bl	80042ca <HAL_RTC_SetTime>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002164:	f7fe ff8e 	bl	8001084 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002168:	2301      	movs	r3, #1
 800216a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800216c:	2301      	movs	r3, #1
 800216e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002170:	2301      	movs	r3, #1
 8002172:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <MX_RTC_Init+0xac>)
 8002180:	f002 f960 	bl	8004444 <HAL_RTC_SetDate>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800218a:	f7fe ff7b 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000e0 	.word	0x200000e0
 800219c:	40002800 	.word	0x40002800

080021a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_RTC_MspInit+0x50>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d111      	bne.n	80021e8 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c4:	2302      	movs	r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021cc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 fef8 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80021de:	f7fe ff51 	bl	8001084 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_RTC_MspInit+0x54>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021e8:	bf00      	nop
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40002800 	.word	0x40002800
 80021f4:	42470e3c 	.word	0x42470e3c

080021f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <MX_SPI1_Init+0x70>)
 80021fe:	4a1b      	ldr	r2, [pc, #108]	; (800226c <MX_SPI1_Init+0x74>)
 8002200:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <MX_SPI1_Init+0x70>)
 8002204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002208:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <MX_SPI1_Init+0x70>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <MX_SPI1_Init+0x70>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <MX_SPI1_Init+0x70>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <MX_SPI1_Init+0x70>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_SPI1_Init+0x70>)
 8002224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002228:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <MX_SPI1_Init+0x70>)
 800222c:	2210      	movs	r2, #16
 800222e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <MX_SPI1_Init+0x70>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_SPI1_Init+0x70>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <MX_SPI1_Init+0x70>)
 800223e:	2200      	movs	r2, #0
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_SPI1_Init+0x70>)
 8002244:	220a      	movs	r2, #10
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <MX_SPI1_Init+0x70>)
 800224a:	f002 fa14 	bl	8004676 <HAL_SPI_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002254:	f7fe ff16 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  assert_param(IS_SPI_ALL_PERIPH(SPI1));
  assert_param(IS_FUNCTIONAL_STATE(ENABLE));
  /* Enable the selected SPI peripheral */
  SPI1->CR1 |= SPI_CR1_SPE;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <MX_SPI1_Init+0x74>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <MX_SPI1_Init+0x74>)
 800225e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002262:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000168 	.word	0x20000168
 800226c:	40013000 	.word	0x40013000

08002270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_SPI_MspInit+0x94>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d133      	bne.n	80022fa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_SPI_MspInit+0x98>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_SPI_MspInit+0x98>)
 800229c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_SPI_MspInit+0x98>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_SPI_MspInit+0x98>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_SPI_MspInit+0x98>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_SPI_MspInit+0x98>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022ca:	23e0      	movs	r3, #224	; 0xe0
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022da:	2305      	movs	r3, #5
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4809      	ldr	r0, [pc, #36]	; (800230c <HAL_SPI_MspInit+0x9c>)
 80022e6:	f000 fbf9 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2023      	movs	r0, #35	; 0x23
 80022f0:	f000 fbbd 	bl	8002a6e <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022f4:	2023      	movs	r0, #35	; 0x23
 80022f6:	f000 fbd6 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	; 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40013000 	.word	0x40013000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_MspInit+0x4c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_MspInit+0x4c>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_MspInit+0x4c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_MspInit+0x4c>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_MspInit+0x4c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 fa40 	bl	8002830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_IN_Pin);
 80023b8:	2002      	movs	r0, #2
 80023ba:	f000 fd2d 	bl	8002e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_SS_1_Pin);
 80023c6:	2004      	movs	r0, #4
 80023c8:	f000 fd26 	bl	8002e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80023d6:	f002 fb8b 	bl	8004af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000094 	.word	0x20000094

080023e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_SS_Pin);
 80023e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023ec:	f000 fd14 	bl	8002e18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENSOR_IN_Pin);
 80023f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023f4:	f000 fd10 	bl	8002e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <SystemInit+0x20>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <SystemInit+0x20>)
 8002408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	f107 0320 	add.w	r3, r7, #32
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
 800244c:	615a      	str	r2, [r3, #20]
 800244e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002450:	4b33      	ldr	r3, [pc, #204]	; (8002520 <MX_TIM2_Init+0x100>)
 8002452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <MX_TIM2_Init+0x100>)
 800245a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800245e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <MX_TIM2_Init+0x100>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <MX_TIM2_Init+0x100>)
 8002468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800246c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <MX_TIM2_Init+0x100>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <MX_TIM2_Init+0x100>)
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247a:	4829      	ldr	r0, [pc, #164]	; (8002520 <MX_TIM2_Init+0x100>)
 800247c:	f002 f984 	bl	8004788 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002486:	f7fe fdfd 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002494:	4619      	mov	r1, r3
 8002496:	4822      	ldr	r0, [pc, #136]	; (8002520 <MX_TIM2_Init+0x100>)
 8002498:	f002 fcf4 	bl	8004e84 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80024a2:	f7fe fdef 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024a6:	481e      	ldr	r0, [pc, #120]	; (8002520 <MX_TIM2_Init+0x100>)
 80024a8:	f002 fa18 	bl	80048dc <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80024b2:	f7fe fde7 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024be:	f107 0320 	add.w	r3, r7, #32
 80024c2:	4619      	mov	r1, r3
 80024c4:	4816      	ldr	r0, [pc, #88]	; (8002520 <MX_TIM2_Init+0x100>)
 80024c6:	f003 f8a3 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024d0:	f7fe fdd8 	bl	8001084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_TIM2_Init+0x100>)
 80024ec:	f002 fc08 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024f6:	f7fe fdc5 	bl	8001084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2204      	movs	r2, #4
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM2_Init+0x100>)
 8002502:	f002 fbfd 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800250c:	f7fe fdba 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM2_Init+0x100>)
 8002512:	f000 f867 	bl	80025e4 <HAL_TIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3738      	adds	r7, #56	; 0x38
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000011c 	.word	0x2000011c

08002524 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_TIM11_Init+0x40>)
 800252a:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <MX_TIM11_Init+0x44>)
 800252c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 7200-1;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <MX_TIM11_Init+0x40>)
 8002530:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002534:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <MX_TIM11_Init+0x40>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_TIM11_Init+0x40>)
 800253e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002542:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <MX_TIM11_Init+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_TIM11_Init+0x40>)
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <MX_TIM11_Init+0x40>)
 8002552:	f002 f919 	bl	8004788 <HAL_TIM_Base_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800255c:	f7fe fd92 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000094 	.word	0x20000094
 8002568:	40014800 	.word	0x40014800

0800256c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d10e      	bne.n	800259c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_TIM_Base_MspInit+0x70>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <HAL_TIM_Base_MspInit+0x70>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_TIM_Base_MspInit+0x70>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800259a:	e01a      	b.n	80025d2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_TIM_Base_MspInit+0x74>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d115      	bne.n	80025d2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_TIM_Base_MspInit+0x70>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <HAL_TIM_Base_MspInit+0x70>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_TIM_Base_MspInit+0x70>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	201a      	movs	r0, #26
 80025c8:	f000 fa51 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80025cc:	201a      	movs	r0, #26
 80025ce:	f000 fa6a 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40014800 	.word	0x40014800

080025e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d11d      	bne.n	8002642 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_TIM_MspPostInit+0x68>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_TIM_MspPostInit+0x68>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_TIM_MspPostInit+0x68>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002622:	2303      	movs	r3, #3
 8002624:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	4619      	mov	r1, r3
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <HAL_TIM_MspPostInit+0x6c>)
 800263e:	f000 fa4d 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002642:	bf00      	nop
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40020000 	.word	0x40020000

08002654 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_USART6_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_USART6_UART_Init+0x4c>)
 800268c:	f003 f842 	bl	8005714 <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002696:	f7fe fcf5 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200001c0 	.word	0x200001c0
 80026a4:	40011400 	.word	0x40011400

080026a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_UART_MspInit+0x84>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d12b      	bne.n	8002722 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026d4:	f043 0320 	orr.w	r3, r3, #32
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002712:	2308      	movs	r3, #8
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <HAL_UART_MspInit+0x8c>)
 800271e:	f000 f9dd 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40011400 	.word	0x40011400
 8002730:	40023800 	.word	0x40023800
 8002734:	40020800 	.word	0x40020800

08002738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273e:	490e      	ldr	r1, [pc, #56]	; (8002778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002740:	4a0e      	ldr	r2, [pc, #56]	; (800277c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002754:	4c0b      	ldr	r4, [pc, #44]	; (8002784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002762:	f7ff fe4b 	bl	80023fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f003 fb8d 	bl	8005e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276a:	f7fe f90d 	bl	8000988 <main>
  bx  lr    
 800276e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800277c:	08005fac 	.word	0x08005fac
  ldr r2, =_sbss
 8002780:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002784:	20000208 	.word	0x20000208

08002788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_Init+0x40>)
 8002796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_Init+0x40>)
 80027a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_Init+0x40>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f000 f94f 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f000 f808 	bl	80027d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c0:	f7ff fda6 	bl	8002310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x54>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x58>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f967 	bl	8002ac2 <HAL_SYSTICK_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00e      	b.n	800281c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d80a      	bhi.n	800281a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002804:	2200      	movs	r2, #0
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f000 f92f 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_InitTick+0x5c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000010 	.word	0x20000010
 8002828:	20000018 	.word	0x20000018
 800282c:	20000014 	.word	0x20000014

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018
 8002854:	20000204 	.word	0x20000204

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000204 	.word	0x20000204

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff ffee 	bl	8002858 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffde 	bl	8002858 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000018 	.word	0x20000018

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e159      	b.n	8002dac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8148 	bne.w	8002da6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a2 	beq.w	8002da6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a49      	ldr	r2, [pc, #292]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x202>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <HAL_GPIO_Init+0x2f4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x1fe>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a47      	ldr	r2, [pc, #284]	; (8002dd4 <HAL_GPIO_Init+0x2f8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x1fa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <HAL_GPIO_Init+0x2fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x1f6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a45      	ldr	r2, [pc, #276]	; (8002ddc <HAL_GPIO_Init+0x300>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x1f2>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e008      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x204>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f002 0203 	and.w	r2, r2, #3
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf0:	4935      	ldr	r1, [pc, #212]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_GPIO_Init+0x304>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	f67f aea2 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40020c00 	.word	0x40020c00
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40013c00 	.word	0x40013c00

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e00:	e003      	b.n	8002e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	041a      	lsls	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f87a 	bl	8000f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40013c00 	.word	0x40013c00

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e12b      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fd42 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eac:	f001 f864 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a81      	ldr	r2, [pc, #516]	; (80030bc <HAL_I2C_Init+0x274>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d807      	bhi.n	8002ecc <HAL_I2C_Init+0x84>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_I2C_Init+0x278>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e006      	b.n	8002eda <HAL_I2C_Init+0x92>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <HAL_I2C_Init+0x27c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0e7      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a78      	ldr	r2, [pc, #480]	; (80030c8 <HAL_I2C_Init+0x280>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <HAL_I2C_Init+0xd4>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_I2C_Init+0xe8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a69      	ldr	r2, [pc, #420]	; (80030cc <HAL_I2C_Init+0x284>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	3301      	adds	r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	495c      	ldr	r1, [pc, #368]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d819      	bhi.n	8002f84 <HAL_I2C_Init+0x13c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e59      	subs	r1, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f64:	400b      	ands	r3, r1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_I2C_Init+0x138>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e59      	subs	r1, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	e051      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f80:	2304      	movs	r3, #4
 8002f82:	e04f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_I2C_Init+0x168>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e012      	b.n	8002fd6 <HAL_I2C_Init+0x18e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Init+0x196>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e022      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <HAL_I2C_Init+0x1bc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e58      	subs	r0, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	440b      	add	r3, r1
 8002ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	e00f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	0099      	lsls	r1, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6809      	ldr	r1, [r1, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6911      	ldr	r1, [r2, #16]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	000186a0 	.word	0x000186a0
 80030c0:	001e847f 	.word	0x001e847f
 80030c4:	003d08ff 	.word	0x003d08ff
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	10624dd3 	.word	0x10624dd3

080030d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	817b      	strh	r3, [r7, #10]
 80030e0:	4613      	mov	r3, r2
 80030e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7ff fbb8 	bl	8002858 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	f040 80e0 	bne.w	80032b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2319      	movs	r3, #25
 80030fe:	2201      	movs	r2, #1
 8003100:	4970      	ldr	r1, [pc, #448]	; (80032c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f964 	bl	80033d0 <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	e0d3      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Master_Transmit+0x50>
 800311c:	2302      	movs	r3, #2
 800311e:	e0cc      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d007      	beq.n	8003146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2210      	movs	r2, #16
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f89c 	bl	80032cc <I2C_MasterRequestWrite>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e08d      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031b4:	e066      	b.n	8003284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f9de 	bl	800357c <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06b      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11b      	bne.n	8003258 <HAL_I2C_Master_Transmit+0x188>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d017      	beq.n	8003258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f9ce 	bl	80035fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2b04      	cmp	r3, #4
 800326e:	d107      	bne.n	8003280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e01a      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d194      	bne.n	80031b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	00100002 	.word	0x00100002
 80032c8:	ffff0000 	.word	0xffff0000

080032cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	460b      	mov	r3, r1
 80032da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d006      	beq.n	80032f6 <I2C_MasterRequestWrite+0x2a>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d003      	beq.n	80032f6 <I2C_MasterRequestWrite+0x2a>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f4:	d108      	bne.n	8003308 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e00b      	b.n	8003320 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b12      	cmp	r3, #18
 800330e:	d107      	bne.n	8003320 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f84f 	bl	80033d0 <I2C_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003346:	d103      	bne.n	8003350 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e035      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335c:	d108      	bne.n	8003370 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	e01b      	b.n	80033a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	11db      	asrs	r3, r3, #7
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 0306 	and.w	r3, r3, #6
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f063 030f 	orn	r3, r3, #15
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <I2C_MasterRequestWrite+0xfc>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f875 	bl	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e010      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <I2C_MasterRequestWrite+0x100>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f865 	bl	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	00010008 	.word	0x00010008
 80033cc:	00010002 	.word	0x00010002

080033d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e0:	e025      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d021      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7ff fa35 	bl	8002858 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d116      	bne.n	800342e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e023      	b.n	8003476 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10d      	bne.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	e00c      	b.n	800346e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d0b6      	beq.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348c:	e051      	b.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d123      	bne.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0204 	orr.w	r2, r3, #4
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e046      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d021      	beq.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f9b3 	bl	8002858 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e020      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10c      	bne.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e00b      	b.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d18d      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	e02d      	b.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f878 	bl	8003680 <I2C_IsAcknowledgeFailed>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e02d      	b.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d021      	beq.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f959 	bl	8002858 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d116      	bne.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d1ca      	bne.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800360a:	e02d      	b.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f837 	bl	8003680 <I2C_IsAcknowledgeFailed>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e02d      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d021      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7ff f918 	bl	8002858 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d1ca      	bne.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d11b      	bne.n	80036d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e264      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d075      	beq.n	80037ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fe:	4ba3      	ldr	r3, [pc, #652]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d00c      	beq.n	8003724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003712:	2b08      	cmp	r3, #8
 8003714:	d112      	bne.n	800373c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003716:	4b9d      	ldr	r3, [pc, #628]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003722:	d10b      	bne.n	800373c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	4b99      	ldr	r3, [pc, #612]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d05b      	beq.n	80037e8 <HAL_RCC_OscConfig+0x108>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d157      	bne.n	80037e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e23f      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d106      	bne.n	8003754 <HAL_RCC_OscConfig+0x74>
 8003746:	4b91      	ldr	r3, [pc, #580]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a90      	ldr	r2, [pc, #576]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x98>
 800375e:	4b8b      	ldr	r3, [pc, #556]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a8a      	ldr	r2, [pc, #552]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a87      	ldr	r2, [pc, #540]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0xb0>
 8003778:	4b84      	ldr	r3, [pc, #528]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a83      	ldr	r2, [pc, #524]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b81      	ldr	r3, [pc, #516]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a80      	ldr	r2, [pc, #512]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7ff f85e 	bl	8002858 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a0:	f7ff f85a 	bl	8002858 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e204      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0xc0>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7ff f84a 	bl	8002858 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c8:	f7ff f846 	bl	8002858 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1f0      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	4b6c      	ldr	r3, [pc, #432]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0xe8>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d063      	beq.n	80038be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f6:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b5f      	ldr	r3, [pc, #380]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b5c      	ldr	r3, [pc, #368]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x152>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1c4      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b56      	ldr	r3, [pc, #344]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4952      	ldr	r1, [pc, #328]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <HAL_RCC_OscConfig+0x2b0>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe ffff 	bl	8002858 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385e:	f7fe fffb 	bl	8002858 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1a5      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4940      	ldr	r1, [pc, #256]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <HAL_RCC_OscConfig+0x2b0>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe ffde 	bl	8002858 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe ffda 	bl	8002858 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e184      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d030      	beq.n	800392c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_RCC_OscConfig+0x2b4>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe ffbe 	bl	8002858 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe ffba 	bl	8002858 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e164      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x200>
 80038fe:	e015      	b.n	800392c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_OscConfig+0x2b4>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003906:	f7fe ffa7 	bl	8002858 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7fe ffa3 	bl	8002858 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e14d      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f0      	bne.n	800390e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a0 	beq.w	8003a7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a0e      	ldr	r2, [pc, #56]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x2ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_OscConfig+0x2b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d121      	bne.n	80039ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_RCC_OscConfig+0x2b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_RCC_OscConfig+0x2b8>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003982:	f7fe ff69 	bl	8002858 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e011      	b.n	80039ae <HAL_RCC_OscConfig+0x2ce>
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	42470000 	.word	0x42470000
 8003994:	42470e80 	.word	0x42470e80
 8003998:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399c:	f7fe ff5c 	bl	8002858 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e106      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b85      	ldr	r3, [pc, #532]	; (8003bc4 <HAL_RCC_OscConfig+0x4e4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2f0>
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a80      	ldr	r2, [pc, #512]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	e01c      	b.n	8003a0a <HAL_RCC_OscConfig+0x32a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x312>
 80039d8:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a7a      	ldr	r2, [pc, #488]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a77      	ldr	r2, [pc, #476]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_OscConfig+0x32a>
 80039f2:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a74      	ldr	r2, [pc, #464]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a71      	ldr	r2, [pc, #452]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fe ff21 	bl	8002858 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe ff1d 	bl	8002858 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0c5      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCC_OscConfig+0x33a>
 8003a3c:	e014      	b.n	8003a68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe ff0b 	bl	8002858 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe ff07 	bl	8002858 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0af      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ee      	bne.n	8003a46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4b56      	ldr	r3, [pc, #344]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a55      	ldr	r2, [pc, #340]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 809b 	beq.w	8003bba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a84:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d05c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d141      	bne.n	8003b1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a98:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <HAL_RCC_OscConfig+0x4ec>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fedb 	bl	8002858 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe fed7 	bl	8002858 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e081      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab8:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	019b      	lsls	r3, r3, #6
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	3b01      	subs	r3, #1
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCC_OscConfig+0x4ec>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fe feb0 	bl	8002858 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe feac 	bl	8002858 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e056      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x41c>
 8003b1a:	e04e      	b.n	8003bba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_OscConfig+0x4ec>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fe fe99 	bl	8002858 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fe fe95 	bl	8002858 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e03f      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x44a>
 8003b48:	e037      	b.n	8003bba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e032      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <HAL_RCC_OscConfig+0x4e8>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d028      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d121      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d11a      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d111      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	42470060 	.word	0x42470060

08003bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0cc      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b68      	ldr	r3, [pc, #416]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d90c      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b8      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c24:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b50      	ldr	r3, [pc, #320]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	494d      	ldr	r1, [pc, #308]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d044      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e07f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e067      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4934      	ldr	r1, [pc, #208]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fe fdca 	bl	8002858 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fe fdc6 	bl	8002858 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e04f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d20c      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e032      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4916      	ldr	r1, [pc, #88]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	490e      	ldr	r1, [pc, #56]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d56:	f000 f821 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	490a      	ldr	r1, [pc, #40]	; (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fd2a 	bl	80027d0 <HAL_InitTick>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	08005f84 	.word	0x08005f84
 8003d94:	20000010 	.word	0x20000010
 8003d98:	20000014 	.word	0x20000014

08003d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	2300      	movs	r3, #0
 8003dae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db4:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d00d      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x40>
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	f200 80bd 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dce:	e0b7      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dd2:	60bb      	str	r3, [r7, #8]
       break;
 8003dd4:	e0b7      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd6:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003dd8:	60bb      	str	r3, [r7, #8]
      break;
 8003dda:	e0b4      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de6:	4b5b      	ldr	r3, [pc, #364]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04d      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b58      	ldr	r3, [pc, #352]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	ea02 0800 	and.w	r8, r2, r0
 8003e0a:	ea03 0901 	and.w	r9, r3, r1
 8003e0e:	4640      	mov	r0, r8
 8003e10:	4649      	mov	r1, r9
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	014b      	lsls	r3, r1, #5
 8003e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e20:	0142      	lsls	r2, r0, #5
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	ebb0 0008 	subs.w	r0, r0, r8
 8003e2a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	018b      	lsls	r3, r1, #6
 8003e38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e3c:	0182      	lsls	r2, r0, #6
 8003e3e:	1a12      	subs	r2, r2, r0
 8003e40:	eb63 0301 	sbc.w	r3, r3, r1
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	00d9      	lsls	r1, r3, #3
 8003e4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e52:	00d0      	lsls	r0, r2, #3
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	eb12 0208 	adds.w	r2, r2, r8
 8003e5c:	eb43 0309 	adc.w	r3, r3, r9
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	0259      	lsls	r1, r3, #9
 8003e6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e6e:	0250      	lsls	r0, r2, #9
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	f7fc f9aa 	bl	80001d8 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e04a      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	461a      	mov	r2, r3
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	ea02 0400 	and.w	r4, r2, r0
 8003ea6:	ea03 0501 	and.w	r5, r3, r1
 8003eaa:	4620      	mov	r0, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	014b      	lsls	r3, r1, #5
 8003eb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ebc:	0142      	lsls	r2, r0, #5
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	1b00      	subs	r0, r0, r4
 8003ec4:	eb61 0105 	sbc.w	r1, r1, r5
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	018b      	lsls	r3, r1, #6
 8003ed2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ed6:	0182      	lsls	r2, r0, #6
 8003ed8:	1a12      	subs	r2, r2, r0
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	00d9      	lsls	r1, r3, #3
 8003ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eec:	00d0      	lsls	r0, r2, #3
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	1912      	adds	r2, r2, r4
 8003ef4:	eb45 0303 	adc.w	r3, r5, r3
 8003ef8:	f04f 0000 	mov.w	r0, #0
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	0299      	lsls	r1, r3, #10
 8003f02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f06:	0290      	lsls	r0, r2, #10
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f7fc f95e 	bl	80001d8 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	60bb      	str	r3, [r7, #8]
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f42:	60bb      	str	r3, [r7, #8]
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	68bb      	ldr	r3, [r7, #8]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	007a1200 	.word	0x007a1200

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000010 	.word	0x20000010

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff0 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	08005f94 	.word	0x08005f94

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffdc 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0b5b      	lsrs	r3, r3, #13
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08005f94 	.word	0x08005f94

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d038      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff0:	4b68      	ldr	r3, [pc, #416]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff6:	f7fe fc2f 	bl	8002858 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ffe:	f7fe fc2b 	bl	8002858 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0bd      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	495a      	ldr	r1, [pc, #360]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004036:	4b57      	ldr	r3, [pc, #348]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403c:	f7fe fc0c 	bl	8002858 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004044:	f7fe fc08 	bl	8002858 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e09a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004056:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8083 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	4b48      	ldr	r3, [pc, #288]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	4a47      	ldr	r2, [pc, #284]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6413      	str	r3, [r2, #64]	; 0x40
 8004080:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a42      	ldr	r2, [pc, #264]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004096:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004098:	f7fe fbde 	bl	8002858 <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fe fbda 	bl	8002858 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e06c      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b2:	4b3a      	ldr	r3, [pc, #232]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02f      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d028      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040f2:	4a29      	ldr	r2, [pc, #164]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe fba8 	bl	8002858 <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fe fba4 	bl	8002858 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e034      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413a:	d10d      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800414c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004150:	4911      	ldr	r1, [pc, #68]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
 8004156:	e005      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004162:	6093      	str	r3, [r2, #8]
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	7d1a      	ldrb	r2, [r3, #20]
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004188:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	42470068 	.word	0x42470068
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000
 80041a0:	42470e40 	.word	0x42470e40
 80041a4:	424711e0 	.word	0x424711e0

080041a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e083      	b.n	80042c2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7f5b      	ldrb	r3, [r3, #29]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd ffe8 	bl	80021a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	22ca      	movs	r2, #202	; 0xca
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2253      	movs	r2, #83	; 0x53
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9fb 	bl	80045e2 <RTC_EnterInitMode>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	22ff      	movs	r2, #255	; 0xff
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2204      	movs	r2, #4
 80041fe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e05e      	b.n	80042c2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004216:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6919      	ldr	r1, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	041a      	lsls	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004262:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10e      	bne.n	8004290 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f98d 	bl	8004592 <HAL_RTC_WaitForSynchro>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	22ff      	movs	r2, #255	; 0xff
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2204      	movs	r2, #4
 800428a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e018      	b.n	80042c2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	22ff      	movs	r2, #255	; 0xff
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042ca:	b590      	push	{r4, r7, lr}
 80042cc:	b087      	sub	sp, #28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	7f1b      	ldrb	r3, [r3, #28]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_RTC_SetTime+0x1c>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e0aa      	b.n	800443c <HAL_RTC_SetTime+0x172>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2202      	movs	r2, #2
 80042f0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d126      	bne.n	8004346 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f992 	bl	800463a <RTC_ByteToBcd2>
 8004316:	4603      	mov	r3, r0
 8004318:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f98b 	bl	800463a <RTC_ByteToBcd2>
 8004324:	4603      	mov	r3, r0
 8004326:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004328:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	789b      	ldrb	r3, [r3, #2]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f983 	bl	800463a <RTC_ByteToBcd2>
 8004334:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004336:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e018      	b.n	8004378 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004366:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800436c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	78db      	ldrb	r3, [r3, #3]
 8004372:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	22ca      	movs	r2, #202	; 0xca
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2253      	movs	r2, #83	; 0x53
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f92a 	bl	80045e2 <RTC_EnterInitMode>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	22ff      	movs	r2, #255	; 0xff
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2204      	movs	r2, #4
 80043a0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e047      	b.n	800443c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80043ba:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ca:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d111      	bne.n	8004426 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f8c5 	bl	8004592 <HAL_RTC_WaitForSynchro>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2204      	movs	r2, #4
 800441a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00a      	b.n	800443c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	22ff      	movs	r2, #255	; 0xff
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800443a:	2300      	movs	r3, #0
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}

08004444 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	7f1b      	ldrb	r3, [r3, #28]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_RTC_SetDate+0x1c>
 800445c:	2302      	movs	r3, #2
 800445e:	e094      	b.n	800458a <HAL_RTC_SetDate+0x146>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2202      	movs	r2, #2
 800446a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10e      	bne.n	8004490 <HAL_RTC_SetDate+0x4c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	f023 0310 	bic.w	r3, r3, #16
 8004486:	b2db      	uxtb	r3, r3
 8004488:	330a      	adds	r3, #10
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11c      	bne.n	80044d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	78db      	ldrb	r3, [r3, #3]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f8cd 	bl	800463a <RTC_ByteToBcd2>
 80044a0:	4603      	mov	r3, r0
 80044a2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f8c6 	bl	800463a <RTC_ByteToBcd2>
 80044ae:	4603      	mov	r3, r0
 80044b0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80044b2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	789b      	ldrb	r3, [r3, #2]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f8be 	bl	800463a <RTC_ByteToBcd2>
 80044be:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80044c0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e00e      	b.n	80044ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	78db      	ldrb	r3, [r3, #3]
 80044d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80044dc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80044e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	22ca      	movs	r2, #202	; 0xca
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2253      	movs	r2, #83	; 0x53
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f86f 	bl	80045e2 <RTC_EnterInitMode>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	22ff      	movs	r2, #255	; 0xff
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2204      	movs	r2, #4
 8004516:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e033      	b.n	800458a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800452c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004530:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004540:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d111      	bne.n	8004574 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f81e 	bl	8004592 <HAL_RTC_WaitForSynchro>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	22ff      	movs	r2, #255	; 0xff
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2204      	movs	r2, #4
 8004568:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e00a      	b.n	800458a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
  }
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd90      	pop	{r4, r7, pc}

08004592 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ae:	f7fe f953 	bl	8002858 <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045b4:	e009      	b.n	80045ca <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045b6:	f7fe f94f 	bl	8002858 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c4:	d901      	bls.n	80045ca <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e007      	b.n	80045da <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ee      	beq.n	80045b6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d119      	bne.n	8004630 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004606:	f7fe f927 	bl	8002858 <HAL_GetTick>
 800460a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800460c:	e009      	b.n	8004622 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800460e:	f7fe f923 	bl	8002858 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461c:	d901      	bls.n	8004622 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e007      	b.n	8004632 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ee      	beq.n	800460e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004648:	e005      	b.n	8004656 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	3b0a      	subs	r3, #10
 8004654:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	2b09      	cmp	r3, #9
 800465a:	d8f6      	bhi.n	800464a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	b2da      	uxtb	r2, r3
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	4313      	orrs	r3, r2
 8004668:	b2db      	uxtb	r3, r3
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e07b      	b.n	8004780 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004698:	d009      	beq.n	80046ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	61da      	str	r2, [r3, #28]
 80046a0:	e005      	b.n	80046ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fd fdd1 	bl	8002270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	ea42 0103 	orr.w	r1, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	f003 0104 	and.w	r1, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f003 0210 	and.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e041      	b.n	800481e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fedc 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 fc56 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e03c      	b.n	80048ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_Base_Start+0xa0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_TIM_Base_Start+0x5c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d013      	beq.n	8004884 <HAL_TIM_Base_Start+0x5c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_TIM_Base_Start+0xa4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_Base_Start+0x5c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_Start+0xa8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_Base_Start+0x5c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_TIM_Base_Start+0xac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_Base_Start+0x5c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_Base_Start+0xb0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b06      	cmp	r3, #6
 8004894:	d010      	beq.n	80048b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e007      	b.n	80048b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f839 	bl	800497a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fbac 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x24>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e022      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d109      	bne.n	80049ce <HAL_TIM_PWM_Start+0x3e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e015      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x58>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e008      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e068      	b.n	8004ad4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x82>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	e013      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x92>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	e00b      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a30:	e003      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fdbe 	bl	80055c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a23      	ldr	r2, [pc, #140]	; (8004adc <HAL_TIM_PWM_Start+0x14c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <HAL_TIM_PWM_Start+0x14c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d013      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_TIM_PWM_Start+0x150>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <HAL_TIM_PWM_Start+0x154>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_TIM_PWM_Start+0x158>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <HAL_TIM_PWM_Start+0x15c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d111      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d010      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	e007      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40014000 	.word	0x40014000

08004af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0202 	mvn.w	r2, #2
 8004b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa81 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa73 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa84 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0204 	mvn.w	r2, #4
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fa57 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa49 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fa5a 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d122      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d11b      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0208 	mvn.w	r2, #8
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa2d 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa1f 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa30 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d122      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d11b      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0210 	mvn.w	r2, #16
 8004c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa03 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9f5 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa06 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10e      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0201 	mvn.w	r2, #1
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9cf 	bl	8005012 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d10e      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d107      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fd30 	bl	8005700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9cb 	bl	8005062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0220 	mvn.w	r2, #32
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fcfa 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0ae      	b.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	f200 809f 	bhi.w	8004e6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004e6d 	.word	0x08004e6d
 8004d3c:	08004e6d 	.word	0x08004e6d
 8004d40:	08004e6d 	.word	0x08004e6d
 8004d44:	08004da9 	.word	0x08004da9
 8004d48:	08004e6d 	.word	0x08004e6d
 8004d4c:	08004e6d 	.word	0x08004e6d
 8004d50:	08004e6d 	.word	0x08004e6d
 8004d54:	08004deb 	.word	0x08004deb
 8004d58:	08004e6d 	.word	0x08004e6d
 8004d5c:	08004e6d 	.word	0x08004e6d
 8004d60:	08004e6d 	.word	0x08004e6d
 8004d64:	08004e2b 	.word	0x08004e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fa02 	bl	8005178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0208 	orr.w	r2, r2, #8
 8004d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0204 	bic.w	r2, r2, #4
 8004d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	619a      	str	r2, [r3, #24]
      break;
 8004da6:	e064      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fa48 	bl	8005244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6999      	ldr	r1, [r3, #24]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	021a      	lsls	r2, r3, #8
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	619a      	str	r2, [r3, #24]
      break;
 8004de8:	e043      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fa93 	bl	800531c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0208 	orr.w	r2, r2, #8
 8004e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0204 	bic.w	r2, r2, #4
 8004e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69d9      	ldr	r1, [r3, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	61da      	str	r2, [r3, #28]
      break;
 8004e28:	e023      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fadd 	bl	80053f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69d9      	ldr	r1, [r3, #28]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	021a      	lsls	r2, r3, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	61da      	str	r2, [r3, #28]
      break;
 8004e6a:	e002      	b.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0b4      	b.n	800500a <HAL_TIM_ConfigClockSource+0x186>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d03e      	beq.n	8004f58 <HAL_TIM_ConfigClockSource+0xd4>
 8004eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ede:	f200 8087 	bhi.w	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	f000 8086 	beq.w	8004ff6 <HAL_TIM_ConfigClockSource+0x172>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d87f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d01a      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0xa6>
 8004ef4:	2b70      	cmp	r3, #112	; 0x70
 8004ef6:	d87b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d050      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x11a>
 8004efc:	2b60      	cmp	r3, #96	; 0x60
 8004efe:	d877      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d03c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0xfa>
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d873      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d058      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x13a>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d86f      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b30      	cmp	r3, #48	; 0x30
 8004f12:	d064      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d86b      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d060      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d867      	bhi.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05c      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d05a      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x15a>
 8004f28:	e062      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6899      	ldr	r1, [r3, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f000 fb23 	bl	8005584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	609a      	str	r2, [r3, #8]
      break;
 8004f56:	e04f      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f000 fb0c 	bl	8005584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f7a:	609a      	str	r2, [r3, #8]
      break;
 8004f7c:	e03c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f000 fa80 	bl	8005490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2150      	movs	r1, #80	; 0x50
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fad9 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e02c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 fa9f 	bl	80054ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2160      	movs	r1, #96	; 0x60
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fac9 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e01c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fa60 	bl	8005490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fab9 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e00c      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f000 fab0 	bl	800554e <TIM_ITRx_SetConfig>
      break;
 8004fee:	e003      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e000      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a34      	ldr	r2, [pc, #208]	; (800515c <TIM_Base_SetConfig+0xe4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a31      	ldr	r2, [pc, #196]	; (8005160 <TIM_Base_SetConfig+0xe8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a30      	ldr	r2, [pc, #192]	; (8005164 <TIM_Base_SetConfig+0xec>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <TIM_Base_SetConfig+0xf0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <TIM_Base_SetConfig+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01b      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d017      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a22      	ldr	r2, [pc, #136]	; (8005160 <TIM_Base_SetConfig+0xe8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a21      	ldr	r2, [pc, #132]	; (8005164 <TIM_Base_SetConfig+0xec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00f      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a20      	ldr	r2, [pc, #128]	; (8005168 <TIM_Base_SetConfig+0xf0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <TIM_Base_SetConfig+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <TIM_Base_SetConfig+0xf8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <TIM_Base_SetConfig+0xfc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a08      	ldr	r2, [pc, #32]	; (800515c <TIM_Base_SetConfig+0xe4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d103      	bne.n	8005148 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	615a      	str	r2, [r3, #20]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800
 8005168:	40000c00 	.word	0x40000c00
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 0302 	bic.w	r3, r3, #2
 80051c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <TIM_OC1_SetConfig+0xc8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10c      	bne.n	80051ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0308 	bic.w	r3, r3, #8
 80051da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 0304 	bic.w	r3, r3, #4
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <TIM_OC1_SetConfig+0xc8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d111      	bne.n	800521a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40010000 	.word	0x40010000

08005244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0210 	bic.w	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0320 	bic.w	r3, r3, #32
 800528e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <TIM_OC2_SetConfig+0xd4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <TIM_OC2_SetConfig+0xd4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d113      	bne.n	80052f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000

0800531c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <TIM_OC3_SetConfig+0xd0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d10d      	bne.n	8005396 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <TIM_OC3_SetConfig+0xd0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d113      	bne.n	80053c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40010000 	.word	0x40010000

080053f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800543a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	031b      	lsls	r3, r3, #12
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a10      	ldr	r2, [pc, #64]	; (800548c <TIM_OC4_SetConfig+0x9c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d109      	bne.n	8005464 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	019b      	lsls	r3, r3, #6
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000

08005490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 030a 	bic.w	r3, r3, #10
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0210 	bic.w	r2, r3, #16
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	031b      	lsls	r3, r3, #12
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800552a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	f043 0307 	orr.w	r3, r3, #7
 8005570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	609a      	str	r2, [r3, #8]
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	609a      	str	r2, [r3, #8]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2201      	movs	r2, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	401a      	ands	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e050      	b.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d018      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d013      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a18      	ldr	r2, [pc, #96]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00e      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d009      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d10c      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40014000 	.word	0x40014000

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e03f      	b.n	80057a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc ffb4 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2224      	movs	r2, #36	; 0x24
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f9cb 	bl	8005af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695a      	ldr	r2, [r3, #20]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800578c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b08a      	sub	sp, #40	; 0x28
 80057b2:	af02      	add	r7, sp, #8
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d17c      	bne.n	80058c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_UART_Transmit+0x2c>
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e075      	b.n	80058ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_UART_Transmit+0x3e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e06e      	b.n	80058ca <HAL_UART_Transmit+0x11c>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2221      	movs	r2, #33	; 0x21
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005802:	f7fd f829 	bl	8002858 <HAL_GetTick>
 8005806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581c:	d108      	bne.n	8005830 <HAL_UART_Transmit+0x82>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e003      	b.n	8005838 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005840:	e02a      	b.n	8005898 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f8e2 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e036      	b.n	80058ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	3302      	adds	r3, #2
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e007      	b.n	800588a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1cf      	bne.n	8005842 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2140      	movs	r1, #64	; 0x40
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f8b2 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e006      	b.n	80058ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e000      	b.n	80058ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
  }
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b08a      	sub	sp, #40	; 0x28
 80058d6:	af02      	add	r7, sp, #8
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	f040 808c 	bne.w	8005a0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_Receive+0x2e>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e084      	b.n	8005a0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_UART_Receive+0x40>
 800590e:	2302      	movs	r3, #2
 8005910:	e07d      	b.n	8005a0e <HAL_UART_Receive+0x13c>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2222      	movs	r2, #34	; 0x22
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592e:	f7fc ff93 	bl	8002858 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d108      	bne.n	800595c <HAL_UART_Receive+0x8a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e003      	b.n	8005964 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800596c:	e043      	b.n	80059f6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2120      	movs	r1, #32
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f84c 	bl	8005a16 <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e042      	b.n	8005a0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599a:	b29a      	uxth	r2, r3
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	3302      	adds	r3, #2
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e01f      	b.n	80059e8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d007      	beq.n	80059c2 <HAL_UART_Receive+0xf0>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_UART_Receive+0xfe>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e008      	b.n	80059e2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1b6      	bne.n	800596e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b090      	sub	sp, #64	; 0x40
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a26:	e050      	b.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d04c      	beq.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a36:	f7fc ff0f 	bl	8002858 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d241      	bcs.n	8005aca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a66:	637a      	str	r2, [r7, #52]	; 0x34
 8005a68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a9a:	623a      	str	r2, [r7, #32]
 8005a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	69f9      	ldr	r1, [r7, #28]
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e00f      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	bf0c      	ite	eq
 8005ada:	2301      	moveq	r3, #1
 8005adc:	2300      	movne	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	79fb      	ldrb	r3, [r7, #7]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d09f      	beq.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3740      	adds	r7, #64	; 0x40
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	b09f      	sub	sp, #124	; 0x7c
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	68d9      	ldr	r1, [r3, #12]
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	ea40 0301 	orr.w	r3, r0, r1
 8005b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b38:	f021 010c 	bic.w	r1, r1, #12
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b42:	430b      	orrs	r3, r1
 8005b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b52:	6999      	ldr	r1, [r3, #24]
 8005b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	ea40 0301 	orr.w	r3, r0, r1
 8005b5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4bc5      	ldr	r3, [pc, #788]	; (8005e78 <UART_SetConfig+0x384>)
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d004      	beq.n	8005b72 <UART_SetConfig+0x7e>
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4bc3      	ldr	r3, [pc, #780]	; (8005e7c <UART_SetConfig+0x388>)
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d103      	bne.n	8005b7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b72:	f7fe fa15 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8005b76:	6778      	str	r0, [r7, #116]	; 0x74
 8005b78:	e002      	b.n	8005b80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b7a:	f7fe f9fd 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8005b7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b88:	f040 80b6 	bne.w	8005cf8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8e:	461c      	mov	r4, r3
 8005b90:	f04f 0500 	mov.w	r5, #0
 8005b94:	4622      	mov	r2, r4
 8005b96:	462b      	mov	r3, r5
 8005b98:	1891      	adds	r1, r2, r2
 8005b9a:	6439      	str	r1, [r7, #64]	; 0x40
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ba4:	1912      	adds	r2, r2, r4
 8005ba6:	eb45 0303 	adc.w	r3, r5, r3
 8005baa:	f04f 0000 	mov.w	r0, #0
 8005bae:	f04f 0100 	mov.w	r1, #0
 8005bb2:	00d9      	lsls	r1, r3, #3
 8005bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bb8:	00d0      	lsls	r0, r2, #3
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	1911      	adds	r1, r2, r4
 8005bc0:	6639      	str	r1, [r7, #96]	; 0x60
 8005bc2:	416b      	adcs	r3, r5
 8005bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005be0:	f7fa fafa 	bl	80001d8 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4ba5      	ldr	r3, [pc, #660]	; (8005e80 <UART_SetConfig+0x38c>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	011e      	lsls	r6, r3, #4
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf4:	461c      	mov	r4, r3
 8005bf6:	f04f 0500 	mov.w	r5, #0
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	1891      	adds	r1, r2, r2
 8005c00:	6339      	str	r1, [r7, #48]	; 0x30
 8005c02:	415b      	adcs	r3, r3
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
 8005c06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c0a:	1912      	adds	r2, r2, r4
 8005c0c:	eb45 0303 	adc.w	r3, r5, r3
 8005c10:	f04f 0000 	mov.w	r0, #0
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	00d9      	lsls	r1, r3, #3
 8005c1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c1e:	00d0      	lsls	r0, r2, #3
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	1911      	adds	r1, r2, r4
 8005c26:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c28:	416b      	adcs	r3, r5
 8005c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	461a      	mov	r2, r3
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	1891      	adds	r1, r2, r2
 8005c38:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c3a:	415b      	adcs	r3, r3
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c46:	f7fa fac7 	bl	80001d8 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4b8c      	ldr	r3, [pc, #560]	; (8005e80 <UART_SetConfig+0x38c>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	; 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	3332      	adds	r3, #50	; 0x32
 8005c62:	4a87      	ldr	r2, [pc, #540]	; (8005e80 <UART_SetConfig+0x38c>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c70:	441e      	add	r6, r3
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	4618      	mov	r0, r3
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	1894      	adds	r4, r2, r2
 8005c80:	623c      	str	r4, [r7, #32]
 8005c82:	415b      	adcs	r3, r3
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
 8005c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c8a:	1812      	adds	r2, r2, r0
 8005c8c:	eb41 0303 	adc.w	r3, r1, r3
 8005c90:	f04f 0400 	mov.w	r4, #0
 8005c94:	f04f 0500 	mov.w	r5, #0
 8005c98:	00dd      	lsls	r5, r3, #3
 8005c9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c9e:	00d4      	lsls	r4, r2, #3
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	1814      	adds	r4, r2, r0
 8005ca6:	653c      	str	r4, [r7, #80]	; 0x50
 8005ca8:	414b      	adcs	r3, r1
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
 8005cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	1891      	adds	r1, r2, r2
 8005cb8:	61b9      	str	r1, [r7, #24]
 8005cba:	415b      	adcs	r3, r3
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005cc6:	f7fa fa87 	bl	80001d8 <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4b6c      	ldr	r3, [pc, #432]	; (8005e80 <UART_SetConfig+0x38c>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	; 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	3332      	adds	r3, #50	; 0x32
 8005ce2:	4a67      	ldr	r2, [pc, #412]	; (8005e80 <UART_SetConfig+0x38c>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 0207 	and.w	r2, r3, #7
 8005cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4432      	add	r2, r6
 8005cf4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cf6:	e0b9      	b.n	8005e6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	f04f 0500 	mov.w	r5, #0
 8005d00:	4622      	mov	r2, r4
 8005d02:	462b      	mov	r3, r5
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	6139      	str	r1, [r7, #16]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d10:	1912      	adds	r2, r2, r4
 8005d12:	eb45 0303 	adc.w	r3, r5, r3
 8005d16:	f04f 0000 	mov.w	r0, #0
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	00d9      	lsls	r1, r3, #3
 8005d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d24:	00d0      	lsls	r0, r2, #3
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	eb12 0804 	adds.w	r8, r2, r4
 8005d2e:	eb43 0905 	adc.w	r9, r3, r5
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d4a:	0082      	lsls	r2, r0, #2
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fa42 	bl	80001d8 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <UART_SetConfig+0x38c>)
 8005d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	011e      	lsls	r6, r3, #4
 8005d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d64:	4618      	mov	r0, r3
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	1894      	adds	r4, r2, r2
 8005d70:	60bc      	str	r4, [r7, #8]
 8005d72:	415b      	adcs	r3, r3
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d7a:	1812      	adds	r2, r2, r0
 8005d7c:	eb41 0303 	adc.w	r3, r1, r3
 8005d80:	f04f 0400 	mov.w	r4, #0
 8005d84:	f04f 0500 	mov.w	r5, #0
 8005d88:	00dd      	lsls	r5, r3, #3
 8005d8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d8e:	00d4      	lsls	r4, r2, #3
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	1814      	adds	r4, r2, r0
 8005d96:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d98:	414b      	adcs	r3, r1
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	008b      	lsls	r3, r1, #2
 8005db0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005db4:	0082      	lsls	r2, r0, #2
 8005db6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dba:	f7fa fa0d 	bl	80001d8 <__aeabi_uldivmod>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <UART_SetConfig+0x38c>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	2164      	movs	r1, #100	; 0x64
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	3332      	adds	r3, #50	; 0x32
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <UART_SetConfig+0x38c>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de2:	441e      	add	r6, r3
 8005de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de6:	4618      	mov	r0, r3
 8005de8:	f04f 0100 	mov.w	r1, #0
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	1894      	adds	r4, r2, r2
 8005df2:	603c      	str	r4, [r7, #0]
 8005df4:	415b      	adcs	r3, r3
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfc:	1812      	adds	r2, r2, r0
 8005dfe:	eb41 0303 	adc.w	r3, r1, r3
 8005e02:	f04f 0400 	mov.w	r4, #0
 8005e06:	f04f 0500 	mov.w	r5, #0
 8005e0a:	00dd      	lsls	r5, r3, #3
 8005e0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e10:	00d4      	lsls	r4, r2, #3
 8005e12:	4622      	mov	r2, r4
 8005e14:	462b      	mov	r3, r5
 8005e16:	eb12 0a00 	adds.w	sl, r2, r0
 8005e1a:	eb43 0b01 	adc.w	fp, r3, r1
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	008b      	lsls	r3, r1, #2
 8005e32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e36:	0082      	lsls	r2, r0, #2
 8005e38:	4650      	mov	r0, sl
 8005e3a:	4659      	mov	r1, fp
 8005e3c:	f7fa f9cc 	bl	80001d8 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <UART_SetConfig+0x38c>)
 8005e46:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2164      	movs	r1, #100	; 0x64
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	3332      	adds	r3, #50	; 0x32
 8005e58:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <UART_SetConfig+0x38c>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f003 020f 	and.w	r2, r3, #15
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4432      	add	r2, r6
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	377c      	adds	r7, #124	; 0x7c
 8005e70:	46bd      	mov	sp, r7
 8005e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e76:	bf00      	nop
 8005e78:	40011000 	.word	0x40011000
 8005e7c:	40011400 	.word	0x40011400
 8005e80:	51eb851f 	.word	0x51eb851f

08005e84 <__libc_init_array>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4d0d      	ldr	r5, [pc, #52]	; (8005ebc <__libc_init_array+0x38>)
 8005e88:	4c0d      	ldr	r4, [pc, #52]	; (8005ec0 <__libc_init_array+0x3c>)
 8005e8a:	1b64      	subs	r4, r4, r5
 8005e8c:	10a4      	asrs	r4, r4, #2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	42a6      	cmp	r6, r4
 8005e92:	d109      	bne.n	8005ea8 <__libc_init_array+0x24>
 8005e94:	4d0b      	ldr	r5, [pc, #44]	; (8005ec4 <__libc_init_array+0x40>)
 8005e96:	4c0c      	ldr	r4, [pc, #48]	; (8005ec8 <__libc_init_array+0x44>)
 8005e98:	f000 f820 	bl	8005edc <_init>
 8005e9c:	1b64      	subs	r4, r4, r5
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	2600      	movs	r6, #0
 8005ea2:	42a6      	cmp	r6, r4
 8005ea4:	d105      	bne.n	8005eb2 <__libc_init_array+0x2e>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eac:	4798      	blx	r3
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7ee      	b.n	8005e90 <__libc_init_array+0xc>
 8005eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb6:	4798      	blx	r3
 8005eb8:	3601      	adds	r6, #1
 8005eba:	e7f2      	b.n	8005ea2 <__libc_init_array+0x1e>
 8005ebc:	08005fa4 	.word	0x08005fa4
 8005ec0:	08005fa4 	.word	0x08005fa4
 8005ec4:	08005fa4 	.word	0x08005fa4
 8005ec8:	08005fa8 	.word	0x08005fa8

08005ecc <memset>:
 8005ecc:	4402      	add	r2, r0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d100      	bne.n	8005ed6 <memset+0xa>
 8005ed4:	4770      	bx	lr
 8005ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eda:	e7f9      	b.n	8005ed0 <memset+0x4>

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
